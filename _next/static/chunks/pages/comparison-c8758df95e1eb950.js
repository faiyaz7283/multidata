(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[731],{9672:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/comparison",function(){return n(75)}])},75:function(e,a,n){"use strict";n.r(a),n.d(a,{__N_SSG:function(){return s}});var t=n(5893),r=n(1151);function i(e){let a=Object.assign({h1:"h1",p:"p",h2:"h2",hr:"hr",em:"em"},(0,r.ah)(),e.components),{Properties:n,Property:i}=a;return n||d("Properties",!0),i||d("Property",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h1,{children:"Comparison"}),"\n",(0,t.jsx)(a.p,{children:"One of the benefits of storing alternate values is the built-in functionality of comparison methods. These methods enable easy comparison\nand calculation of differences between main and alternate values."}),"\n",(0,t.jsx)(a.h2,{id:"et",children:"et()"}),"\n",(0,t.jsx)(a.p,{children:"Get 'equal to' comparison for the specified key(s). (main == alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"object",children:(0,t.jsx)(a.p,{children:"A data2d or a data3d object."})}),(0,t.jsx)(i,{name:"key",type:"string",children:(0,t.jsx)(a.p,{children:"A key identifier. This parameter is only available with data2d object; not available for data3d."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"returns",type:"bool",children:(0,t.jsx)(a.p,{children:"A boolean value."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"et-2",children:"et()"}),"\n",(0,t.jsx)(a.p,{children:"Get 'equal to' comparison of all the keys. (main == alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data2d",children:(0,t.jsx)(a.p,{children:"A data2d object."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"pk-et",children:"pkEt()"}),"\n",(0,t.jsx)(a.p,{children:"Get all 'equal to' comparison of a primary key. (main == alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"dk-et",children:"dkEt()"}),"\n",(0,t.jsx)(a.p,{children:"Get all 'equal to' comparison of a data key. (main == alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"gt",children:"gt()"}),"\n",(0,t.jsx)(a.p,{children:"Get 'greater than' comparison for the specified key(s). (main > alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"object",children:(0,t.jsx)(a.p,{children:"A data2d or a data3d object."})}),(0,t.jsx)(i,{name:"key",type:"string",children:(0,t.jsx)(a.p,{children:"A key identifier. This parameter is only available with data2d object; not available for data3d."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"returns",type:"bool",children:(0,t.jsx)(a.p,{children:"A boolean value."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"gt-2",children:"gt()"}),"\n",(0,t.jsx)(a.p,{children:"Get 'greater than' comparison of all the keys. (main > alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data2d",children:(0,t.jsx)(a.p,{children:"A data2d object."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"pk-gt",children:"pkGt()"}),"\n",(0,t.jsx)(a.p,{children:"Get all 'greater than' comparison of a primary key. (main > alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"dk-gt",children:"dkGt()"}),"\n",(0,t.jsx)(a.p,{children:"Get all 'greater than' comparison of a data key. (main > alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"gte",children:"gte()"}),"\n",(0,t.jsx)(a.p,{children:"Get 'greater than or equal to' comparison for the specified key(s). (main ≥ alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"object",children:(0,t.jsx)(a.p,{children:"A data2d or a data3d object."})}),(0,t.jsx)(i,{name:"key",type:"string",children:(0,t.jsx)(a.p,{children:"A key identifier. This parameter is only available with data2d object; not available for data3d."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"returns",type:"bool",children:(0,t.jsx)(a.p,{children:"A boolean value."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"gte-2",children:"gte()"}),"\n",(0,t.jsx)(a.p,{children:"Get 'greater than or equal to' comparison of all the keys. (main ≥ alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data2d",children:(0,t.jsx)(a.p,{children:"A data2d object."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"pk-gte",children:"pkGte()"}),"\n",(0,t.jsx)(a.p,{children:"Get all 'greater than or equal to' comparison of a primary key. (main ≥ alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"dk-gte",children:"dkGte()"}),"\n",(0,t.jsx)(a.p,{children:"Get all 'greater than or equal to' comparison of a data key. (main ≥ alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"lt",children:"lt()"}),"\n",(0,t.jsx)(a.p,{children:"Get 'less than' comparison for the specified key(s). (main < alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"object",children:(0,t.jsx)(a.p,{children:"A data2d or a data3d object."})}),(0,t.jsx)(i,{name:"key",type:"string",children:(0,t.jsx)(a.p,{children:"A key identifier. This parameter is only available with data2d object; not available for data3d."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"returns",type:"bool",children:(0,t.jsx)(a.p,{children:"A boolean value."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"lt-2",children:"lt()"}),"\n",(0,t.jsx)(a.p,{children:"Get 'less than' comparison of all the keys. (main < alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data2d",children:(0,t.jsx)(a.p,{children:"A data2d object."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"pk-lt",children:"pkLt()"}),"\n",(0,t.jsx)(a.p,{children:"Get all 'less than' comparison of a primary key. (main < alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"dk-lt",children:"dkLt()"}),"\n",(0,t.jsx)(a.p,{children:"Get all 'less than' comparison of a data key. (main < alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"lte",children:"lte()"}),"\n",(0,t.jsx)(a.p,{children:"Get 'less than or equal to' comparison for the specified key(s). (main ≤ alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"object",children:(0,t.jsx)(a.p,{children:"A data2d or a data3d object."})}),(0,t.jsx)(i,{name:"key",type:"string",children:(0,t.jsx)(a.p,{children:"A key identifier. This parameter is only available with data2d object; not available for data3d."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"returns",type:"bool",children:(0,t.jsx)(a.p,{children:"A boolean value."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"lte-2",children:"lte()"}),"\n",(0,t.jsx)(a.p,{children:"Get 'less than or equal to' comparison of all the keys. (main ≤ alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data2d",children:(0,t.jsx)(a.p,{children:"A data2d object."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"pk-lte",children:"pkLte()"}),"\n",(0,t.jsx)(a.p,{children:"Get all 'less than or equal to' comparison of a primary key. (main ≤ alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"dk-lte",children:"dkLte()"}),"\n",(0,t.jsx)(a.p,{children:"Get all 'less than or equal to' comparison of a data key. (main ≤ alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key."})}),(0,t.jsx)(i,{name:"returns",type:"array<bool>",children:(0,t.jsx)(a.p,{children:"A boolean array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"change",children:"change()"}),"\n",(0,t.jsx)(a.p,{children:"Get change or change percent for the specified key(s). (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"object",children:(0,t.jsx)(a.p,{children:"A data2d or a data3d object."})}),(0,t.jsx)(i,{name:"key",type:"string",children:(0,t.jsx)(a.p,{children:"A key identifier. This parameter is only available with data2d object; not available for data3d."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"returns",type:"float",children:(0,t.jsx)(a.p,{children:"A float value."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"change-2",children:"change()"}),"\n",(0,t.jsx)(a.p,{children:"Get change or change percent of all the keys. (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data2d",children:(0,t.jsx)(a.p,{children:"A data2d object."})}),(0,t.jsx)(i,{name:"returns",type:"array<float>",children:(0,t.jsx)(a.p,{children:"A float array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"pk-change",children:"pkChange()"}),"\n",(0,t.jsx)(a.p,{children:"Get all change or change percent of a primary key. (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key."})}),(0,t.jsx)(i,{name:"returns",type:"array<float>",children:(0,t.jsx)(a.p,{children:"A float array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"dk-change",children:"dkChange()"}),"\n",(0,t.jsx)(a.p,{children:"Get all change or change percent of a data key. (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key."})}),(0,t.jsx)(i,{name:"returns",type:"array<float>",children:(0,t.jsx)(a.p,{children:"A float array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"change-f",children:"changeF()"}),"\n",(0,t.jsx)(a.p,{children:"Get formatted change or change percent for the specified key(s). (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"object",children:(0,t.jsx)(a.p,{children:"A data2d or a data3d object."})}),(0,t.jsx)(i,{name:"key",type:"string",children:(0,t.jsx)(a.p,{children:"A key identifier. This parameter is only available with data2d object; not available for data3d."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"percent",type:"bool",children:(0,t.jsxs)(a.p,{children:["Set to true to get change percent values instead. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"format",type:"na",children:(0,t.jsxs)(a.p,{children:["A custom format. Uses a default format, if nothing is provided. ",(0,t.jsx)(a.em,{children:"Optional. The default is na."})]})}),(0,t.jsx)(i,{name:"returns",type:"string",children:(0,t.jsx)(a.p,{children:"A string value."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"change-f-2",children:"changeF()"}),"\n",(0,t.jsx)(a.p,{children:"Get formatted change or change percent of all the keys. (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data2d",children:(0,t.jsx)(a.p,{children:"A data2d object."})}),(0,t.jsx)(i,{name:"percent",type:"bool",children:(0,t.jsxs)(a.p,{children:["Set to true to get change percent values instead. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"format",type:"na",children:(0,t.jsxs)(a.p,{children:["A custom format. Uses a default format, if nothing is provided. ",(0,t.jsx)(a.em,{children:"Optional. The default is na."})]})}),(0,t.jsx)(i,{name:"returns",type:"array<string>",children:(0,t.jsx)(a.p,{children:"A string array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"pk-change-f",children:"pkChangeF()"}),"\n",(0,t.jsx)(a.p,{children:"Get all formatted change or change percent of a primary key. (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key."})}),(0,t.jsx)(i,{name:"percent",type:"bool",children:(0,t.jsxs)(a.p,{children:["Set to true to get change percent values instead. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"format",type:"na",children:(0,t.jsxs)(a.p,{children:["A custom format. Uses a default format, if nothing is provided. ",(0,t.jsx)(a.em,{children:"Optional. The default is na."})]})}),(0,t.jsx)(i,{name:"returns",type:"array<string>",children:(0,t.jsx)(a.p,{children:"A string array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"dk-change-f",children:"dkChangeF()"}),"\n",(0,t.jsx)(a.p,{children:"Get all formatted change or change percent of a data key. (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key."})}),(0,t.jsx)(i,{name:"percent",type:"bool",children:(0,t.jsxs)(a.p,{children:["Set to true to get change percent values instead. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"format",type:"na",children:(0,t.jsxs)(a.p,{children:["A custom format. Uses a default format, if nothing is provided. ",(0,t.jsx)(a.em,{children:"Optional. The default is na."})]})}),(0,t.jsx)(i,{name:"returns",type:"array<string>",children:(0,t.jsx)(a.p,{children:"A string array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"timestamp-change",children:"timestampChange()"}),"\n",(0,t.jsx)(a.p,{children:"Get segmented time difference for the specified key(s). (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"object",children:(0,t.jsx)(a.p,{children:"A data2d or a data3d object."})}),(0,t.jsx)(i,{name:"key",type:"string",children:(0,t.jsx)(a.p,{children:"A key identifier. This parameter is only available with data2d object; not available for data3d."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key. This parameter is only available with data3d object; not available for data2d."})}),(0,t.jsx)(i,{name:"years",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the years segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"months",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the months segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"weeks",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the weeks segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"days",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the days segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"hours",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the hours segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"minutes",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the minutes segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"seconds",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the seconds segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"returns",type:"string",children:(0,t.jsx)(a.p,{children:"A string value."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"timestamp-change-2",children:"timestampChange()"}),"\n",(0,t.jsx)(a.p,{children:"Get segmented time difference of all the keys. (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data2d",children:(0,t.jsx)(a.p,{children:"A data2d object."})}),(0,t.jsx)(i,{name:"years",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the years segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"months",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the months segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"weeks",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the weeks segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"days",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the days segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"hours",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the hours segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"minutes",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the minutes segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"seconds",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the seconds segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"returns",type:"array<string>",children:(0,t.jsx)(a.p,{children:"A string array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"pk-timestamp-change",children:"pkTimestampChange()"}),"\n",(0,t.jsx)(a.p,{children:"Get all segmented time difference of a primary key. (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"primaryKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d primary key."})}),(0,t.jsx)(i,{name:"years",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the years segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"months",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the months segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"weeks",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the weeks segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"days",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the days segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"hours",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the hours segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"minutes",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the minutes segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"seconds",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the seconds segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"returns",type:"array<string>",children:(0,t.jsx)(a.p,{children:"A string array."})})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"dk-timestamp-change",children:"dkTimestampChange()"}),"\n",(0,t.jsx)(a.p,{children:"Get all segmented time difference of a data key. (main - alt)"}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)(i,{name:"this",type:"data3d",children:(0,t.jsx)(a.p,{children:"A data3d object."})}),(0,t.jsx)(i,{name:"dataKey",type:"string",children:(0,t.jsx)(a.p,{children:"A data3d data key."})}),(0,t.jsx)(i,{name:"years",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the years segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"months",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the months segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"weeks",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the weeks segment. Off by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is false."})]})}),(0,t.jsx)(i,{name:"days",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the days segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"hours",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the hours segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"minutes",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the minutes segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"seconds",type:"bool",children:(0,t.jsxs)(a.p,{children:["Switch to turn on/off the seconds segment. On by default. ",(0,t.jsx)(a.em,{children:"Optional. The default is true."})]})}),(0,t.jsx)(i,{name:"returns",type:"array<string>",children:(0,t.jsx)(a.p,{children:"A string array."})})]})]})}var s=!0;function d(e,a){throw Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}a.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:a}=Object.assign({},(0,r.ah)(),e.components);return a?(0,t.jsx)(a,Object.assign({},e,{children:(0,t.jsx)(i,e)})):i(e)}}},function(e){e.O(0,[774,888,179],function(){return e(e.s=9672)}),_N_E=e.O()}]);