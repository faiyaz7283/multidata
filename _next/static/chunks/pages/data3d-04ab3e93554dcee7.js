(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[379],{2022:function(s,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/data3d",function(){return a(3600)}])},3600:function(s,n,a){"use strict";a.r(n),a.d(n,{__N_SSG:function(){return r}});var o=a(5893),e=a(1151);function t(s){let n=Object.assign({h1:"h1",p:"p",a:"a",code:"code",em:"em",h2:"h2",ul:"ul",li:"li",strong:"strong",pre:"pre",ol:"ol"},(0,e.ah)(),s.components),{Note:a,CodeGroup:t}=n;return t||i("CodeGroup",!0),a||i("Note",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{children:"Data3d"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," data structure is an extension of the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object, designed to enable users to store multiple\n",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," objects, each identified by a unique primary key. This powerful data management tool allows for grouping key-value\npairs based on primary keys, providing advanced data organization and analysis capabilities within ",(0,o.jsx)(n.em,{children:"Pine Script's"})," indicators, strategies,\nand libraries."]}),"\n",(0,o.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,o.jsxs)(n.p,{children:["To facilitate the storage of multiple data types of key-value pairs grouped by primary keys, ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," relies on another object\ncalled ",(0,o.jsx)(n.a,{href:"/create-keys-values#pkv",children:(0,o.jsx)(n.code,{children:"pkv"})})," ",(0,o.jsx)(n.em,{children:"(primary key with key-value pairs)"}),". The ",(0,o.jsx)(n.a,{href:"/create-keys-values#pkv",children:(0,o.jsx)(n.code,{children:"pkv"})})," object serves as a container for a single\nprimary key along with its corresponding ",(0,o.jsx)(n.em,{children:"array"})," of key-value pairs. By using these ",(0,o.jsx)(n.a,{href:"/create-keys-values#pkv",children:(0,o.jsx)(n.code,{children:"pkv"})})," objects within an ",(0,o.jsx)(n.em,{children:"array"})," and\npushing them onto a ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object, we create a robust system for unique primary and data key-value storage."]}),"\n",(0,o.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,o.jsxs)(n.p,{children:["Just like the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," data structure, ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," offers similar powerful features plus more."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Primary Keys:"})," The primary key feature allows ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," to store and uniquely identify groups of key-value pairs. With this\ncapability, ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," enables multi-layered data storage, making it versatile for handling complex data structures."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Storing Alternate Values:"})," Similar to ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," objects, each primary key-value pair in ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," can store an\nalternate value, with all the same features and functionalities."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Storing Unix Timestamp:"})," Similar to the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," objects, ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," provides the same advantages for handling\n",(0,o.jsx)(n.em,{children:"Unix timestamp"})," values. ",(0,o.jsx)(n.em,{children:"Timestamps"})," are stored as a dedicated data type within ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})}),", ensuring seamless operations for storage,\nretrieval, and display. Furthermore, you can make use of the built-in comparison methods when dealing with alternate values, just as you would\nwith ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," objects."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Comparison With Alternate:"})," Similar to ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})}),", ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," also offers the capability to perform comparison\noperations within its values. You can easily compare main values with their corresponding alternate values, enabling you to analyze and\nunderstand the variations and changes within the data3d structure."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Automatic Formatting:"}),"  Just like ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," objects, ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," also supports automatic formatting of values.\nWhen a formatting option is available, ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," automatically formats and stores the formatted version of each data entry.\nThis is particularly useful when dealing with complex data types like timestamps."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Sorting Capability:"})," ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"Data3d"})})," introduces sorting based on data keys and their values. By sorting the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})}),"\nobject using a specific data key, the primary keys are reordered based on the sort order of the data key values. This enables efficient\ndata analysis and organization."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Extended Array Functions:"})," Similar to ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})}),", ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," extends some of the built-in\n",(0,o.jsx)(n.em,{children:"array"})," functions. These array functions provide convenient ways to\nmanipulate the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"Data3d"})})," object and its contents."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"perform multiple comparison operations to compare main values with their corresponding alternate values. Additionally, you can effortlessly\nobtain the change difference and change percentage between the main and alternate values."}),"\n",(0,o.jsx)(n.h2,{id:"setup-pkv",children:"Setup PKV"}),"\n",(0,o.jsxs)(n.p,{children:["To construct a single primary key along with its group of key-value pairs, the recommended approach is to use the ",(0,o.jsx)(n.a,{href:"/create-keys-values#pkv",children:(0,o.jsx)(n.code,{children:"pkv()"})})," method.\nThis method accepts the following two parameters:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"this:"})," A string object, used as the ",(0,o.jsx)(n.em,{children:"primary key"})," identifier."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"kvs:"})," An ",(0,o.jsx)(n.em,{children:"array"})," of ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," objects, where each ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})}),"  object contains identical data keys paired with values that belong to\nthe same data type for each key."]}),"\n"]}),"\n",(0,o.jsx)(a,{children:(0,o.jsxs)(n.p,{children:["Please refer to the ",(0,o.jsx)(n.a,{href:"/data2d#setup-keys-and-values",children:(0,o.jsx)(n.code,{children:'"Setup keys and values"'})})," section on the data2d-guide page for more detailed examples\nand options on setting up the array of ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," objects. The same options and methods can be applied when constructing data3d objects."]})}),"\n",(0,o.jsxs)(n.p,{children:["In the example below, we will store ",(0,o.jsx)(n.em,{children:"OHLC (open, high, low, close)"})," data for four companies - ",(0,o.jsx)(n.em,{children:"AAPL, AMZN, MSFT, NVDA,"})," and ",(0,o.jsx)(n.em,{children:"TSLA"}),". Each\ncompany name will serve as a primary key, and the data keys will be ",(0,o.jsx)(n.em,{children:"open, high, low,"})," and ",(0,o.jsx)(n.em,{children:"close"}),". The original data will consist of the\ncurrent ",(0,o.jsx)(n.em,{children:"OHLC"})," values, while the alternate data will store the ",(0,o.jsx)(n.em,{children:"OHLC"})," values of the previous candles."]}),"\n",(0,o.jsx)(n.p,{children:"Let's begin by constructing the data using a simple and lengthy approach. Afterwards, we will explore how to refactor and streamline this data\ncreation process for better efficiency."}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"// Create pkv object for 'AAPL' primary key.\naapl = pkv('AAPL', array.from(\n  'open'.kv(request.security('AAPL', '', open)).alt(request.security('AAPL', '', open[1])),\n  'high'.kv(request.security('AAPL', '', high)).alt(request.security('AAPL', '', high[1])),\n  'low'.kv(request.security('AAPL', '', low)).alt(request.security('AAPL', '', low[1])),\n  'close'.kv(request.security('AAPL', '', close)).alt(request.security('AAPL', '', close[1]))))\n\n// Create pkv object for 'AMZN' primary key.\namzn = pkv('AMZN', array.from(\n  'open'.kv(request.security('AMZN', '', open)).alt(request.security('AMZN', '', open[1])),\n  'high'.kv(request.security('AMZN', '', high)).alt(request.security('AMZN', '', high[1])),\n  'low'.kv(request.security('AMZN', '', low)).alt(request.security('AMZN', '', low[1])),\n  'close'.kv(request.security('AMZN', '', close)).alt(request.security('AMZN', '', close[1]))))\n\n// Create pkv object for 'MSFT' primary key.\nmsft = pkv('MSFT', array.from(\n  'open'.kv(request.security('MSFT', '', open)).alt(request.security('MSFT', '', open[1])),\n  'high'.kv(request.security('MSFT', '', high)).alt(request.security('MSFT', '', high[1])),\n  'low'.kv(request.security('MSFT', '', low)).alt(request.security('MSFT', '', low[1])),\n  'close'.kv(request.security('MSFT', '', close)).alt(request.security('MSFT', '', close[1]))))\n\n// Create pkv object for 'NVDA' primary key.\nnvda = pkv('NVDA', array.from(\n  'open'.kv(request.security('NVDA', '', open)).alt(request.security('NVDA', '', open[1])),\n  'high'.kv(request.security('NVDA', '', high)).alt(request.security('NVDA', '', high[1])),\n  'low'.kv(request.security('NVDA', '', low)).alt(request.security('NVDA', '', low[1])),\n  'close'.kv(request.security('NVDA', '', close)).alt(request.security('NVDA', '', close[1]))))\n\n// Create pkv object for 'TSLA' primary key.\ntsla = pkv('TSLA', array.from(\n  'open'.kv(request.security('TSLA', '', open)).alt(request.security('TSLA', '', open[1])),\n  'high'.kv(request.security('TSLA', '', high)).alt(request.security('TSLA', '', high[1])),\n  'low'.kv(request.security('TSLA', '', low)).alt(request.security('TSLA', '', low[1])),\n  'close'.kv(request.security('TSLA', '', close)).alt(request.security('TSLA', '', close[1]))))\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Create pkv object for &#39;AAPL&#39; primary key.</span></span>\n<span><span style="color: var(--shiki-color-text)">aapl </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> open))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> open[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))))</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Create pkv object for &#39;AMZN&#39; primary key.</span></span>\n<span><span style="color: var(--shiki-color-text)">amzn </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> open))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> open[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))))</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Create pkv object for &#39;MSFT&#39; primary key.</span></span>\n<span><span style="color: var(--shiki-color-text)">msft </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> open))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> open[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))))</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Create pkv object for &#39;NVDA&#39; primary key.</span></span>\n<span><span style="color: var(--shiki-color-text)">nvda </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> open))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> open[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))))</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Create pkv object for &#39;TSLA&#39; primary key.</span></span>\n<span><span style="color: var(--shiki-color-text)">tsla </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> open))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> open[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]))))</span></span>\n<span></span>'}),title:"Building data for data3d the long way"}),"\n",(0,o.jsxs)(n.p,{children:["The above data creation process can quickly become bulky and hard to read. Moreover, it rapidly exhausts the maximum allowed calls for the\nrequest security function, resulting in inefficiency. To address this problem, we can refactor the process by creating a helper function that\ngenerates each ",(0,o.jsx)(n.a,{href:"/create-keys-values#pkv",children:(0,o.jsx)(n.code,{children:"pkv"})})," object using only one request. This approach simplifies and cleans up the code while minimizing the number of request\ncalls required."]}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"// Create a helper function and return an array of kv objects.\ngetOHLC(string ticker) =>\n    m = array.from(open, high, low, close)\n    a = array.from(open[1], high[1], low[1], close[1])\n    [main, alt] = request.security(ticker, '', [m, a])\n    kvs = array.new<kv>()\n    for [idx, dk] in array.from('open', 'high', 'low', 'close')\n        kvs.push(dk.kv(main.get(idx)).alt(alt.get(idx)))\n    kvs\n\n// Now we can simply assign data using the above function.\n// NOTE: Collecting dynamic data should be performed inside a conditional barstate.\nif barstate.islast\n    aapl  = pkv('AAPL', getOHLC('AAPL'))\n    tsla  = pkv('TSLA', getOHLC('TSLA'))\n    amzn  = pkv('AMZN', getOHLC('AMZN'))\n    nvda  = pkv('NVDA', getOHLC('NVDA'))\n    msft  = pkv('MSFT', getOHLC('MSFT'))\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Create a helper function and return an array of kv objects.</span></span>\n<span><span style="color: var(--shiki-token-function)">getOHLC</span><span style="color: var(--shiki-color-text)">(string ticker) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>\n<span><span style="color: var(--shiki-color-text)">    m </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(open</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close)</span></span>\n<span><span style="color: var(--shiki-color-text)">    a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(open[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> high[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> low[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> close[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span></span>\n<span><span style="color: var(--shiki-color-text)">    [main</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">request</span><span style="color: var(--shiki-token-function)">.security</span><span style="color: var(--shiki-color-text)">(ticker</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [m</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> a])</span></span>\n<span><span style="color: var(--shiki-color-text)">    kvs </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.new</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">&gt;()</span></span>\n<span><span style="color: var(--shiki-color-text)">    for [idx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dk] </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">kvs</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">dk</span><span style="color: var(--shiki-token-function)">.kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">main</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(idx))</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">alt</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(idx)))</span></span>\n<span><span style="color: var(--shiki-color-text)">    kvs</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Now we can simply assign data using the above function.</span></span>\n<span><span style="color: var(--shiki-token-comment)">// NOTE: Collecting dynamic data should be performed inside a conditional barstate.</span></span>\n<span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">barstate</span><span style="color: var(--shiki-color-text)">.islast</span></span>\n<span><span style="color: var(--shiki-color-text)">    aapl  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOHLC</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>\n<span><span style="color: var(--shiki-color-text)">    tsla  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOHLC</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;TSLA&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>\n<span><span style="color: var(--shiki-color-text)">    amzn  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOHLC</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>\n<span><span style="color: var(--shiki-color-text)">    nvda  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOHLC</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;NVDA&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>\n<span><span style="color: var(--shiki-color-text)">    msft  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOHLC</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MSFT&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>\n<span></span>'}),title:"Building data for data3d the proper way"}),"\n",(0,o.jsxs)(n.p,{children:["By using the helper function, we can efficiently collect and organize data into ",(0,o.jsx)(n.a,{href:"/create-keys-values#pkv",children:(0,o.jsx)(n.code,{children:"pkv"})})," objects, significantly improving the overall\nperformance and maintainability of the code. This approach optimizes data handling and helps prevent potential security function call limitations,\nresulting in a more streamlined and efficient data collection process."]}),"\n",(0,o.jsxs)(n.p,{children:["Once you have your ",(0,o.jsx)(n.a,{href:"/create-keys-values#pkv",children:(0,o.jsx)(n.code,{children:"pkv"})})," objects created, store them in an ",(0,o.jsx)(n.em,{children:"array"}),". We will use this ",(0,o.jsx)(n.em,{children:"array"})," on later examples when we initiate\nour ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object."]}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"_pkvs_ = array.from(aapl, tsla, amzn, nvda, msft)\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">_pkvs_ </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(aapl</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tsla</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> amzn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> nvda</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> msft)</span></span>\n<span></span>'}),title:"Store pkv objects in array"}),"\n",(0,o.jsx)(n.h2,{id:"exploring-data-types",children:"Exploring Data Types"}),"\n",(0,o.jsxs)(n.p,{children:["Just like the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," data structure, ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," supports the same data types. The supported data\ntypes are as follows:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"string:"})," Represents string values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"float:"})," Represents floating-point numbers (decimals)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"int:"})," Represents integers (whole numbers)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"bool:"})," Represents boolean values (true or false)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"color:"})," Represents color values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"timestamp:"})," Represents Unix-timestamp in milliseconds. Although ",(0,o.jsx)(n.em,{children:"timestamps"})," are internally built using the ",(0,o.jsx)(n.em,{children:"int"})," data\ntype, ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," creates a clear distinction between ",(0,o.jsx)(n.em,{children:"integers"})," and ",(0,o.jsx)(n.em,{children:"timestamps"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For a more detailed understanding of how each of the different data types is used in the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object, you can check out the\n",(0,o.jsx)(n.a,{href:"/data2d#exploring-data-types",children:(0,o.jsx)(n.code,{children:"Exploring Data Types"})})," section on the ",(0,o.jsx)(n.em,{children:"data2d-guide"})," page. You will find comprehensive examples and explanations.\nThe same concepts apply when using these data types with the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object."]}),"\n",(0,o.jsx)(n.h2,{id:"create-data3d-object",children:"Create Data3d Object"}),"\n",(0,o.jsxs)(n.p,{children:["To instantiate a ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object, you will need to pass an ",(0,o.jsx)(n.em,{children:"array"}),"\nof ",(0,o.jsx)(n.a,{href:"/create-keys-values#pkv",children:(0,o.jsx)(n.code,{children:"pkv"})})," objects to the recommended ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"data3d()"})})," function. This function ensures that all primary and data keys are unique and\nperforms essential internal functions to create the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object efficiently. The ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"data3d()"})})," function accepts five parameters:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"pkvs:"})," An ",(0,o.jsx)(n.em,{children:"array"})," of ",(0,o.jsx)(n.a,{href:"/create-keys-values#pkv",children:(0,o.jsx)(n.code,{children:"pkv"})})," objects containing primary key with its key-value pairs."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"sort:"})," An optional ",(0,o.jsx)(n.em,{children:"boolean"})," flag that indicates whether the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})}),"\nobject should be sorted. If set to true, the data will be sorted; otherwise, it will retain its original order."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"sortByKey:"})," Optional, but required when sort is true. This parameter specifies the data key that will be used as a reference for sorting the data."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"asc:"})," An optional ",(0,o.jsx)(n.em,{children:"boolean"})," flag that specifies the sorting order. When set to true,\nthe data will be sorted in ascending order; when set to false, it will be sorted in descending order. This parameter is effective only when sort\nis set to true."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"change:"})," An optional ",(0,o.jsx)(n.em,{children:"boolean"})," flag used in the context of sorting within the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object. When set to\ntrue, it indicates that the sorting should be based on the change percentage values. These change percentage values are calculated from the main and alternate values\nof the specified data key. It's important to note that this functionality only works when alternate values are available for the data key being considered."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"format:"})," An optional parameter that sets the global format for the entire ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object. This format will be applied to all the values within the object. Individual keys with custom format will be ignored."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"timezone:"})," An optional parameter that specifies the timezone used for any\n",(0,o.jsx)(n.em,{children:"timestamp"})," related data within the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object. By default,\nit uses the chart's timezone."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Let's explore some examples and variations of creating a ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object using the recommended ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"data3d()"})})," method:"]}),"\n",(0,o.jsx)(a,{children:(0,o.jsxs)(n.p,{children:["The following example utilizes the ",(0,o.jsx)(n.em,{children:"_pkvs_"})," variable, which represents an array of ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkv"})})," objects that we previously created in the examples above."]})}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"d3d = data3d(\n  pkvs = _pkvs_, // ................ Required. An array of pkv objects.\n  sort = true, // .................. Optional. Sort the data3d object.\n  sortByKey = 'close', // .......... Optional. Sort using this data key 'close'.\n  asc = false, // .................. Optional. False implies descending order.\n  change = true, // ................ Optional. True implies sorting based on change percentages.\n  format = '{0,number,currency}', // Optional. Use this format as default fallback.\n  timezone = 'GMT+2') // ........... Optional. Use this timezone as default fallback.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">d3d </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">data3d</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  pkvs </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> _pkvs_</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ................ Required. An array of pkv objects.</span></span>\n<span><span style="color: var(--shiki-color-text)">  sort </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .................. Optional. Sort the data3d object.</span></span>\n<span><span style="color: var(--shiki-color-text)">  sortByKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .......... Optional. Sort using this data key &#39;close&#39;.</span></span>\n<span><span style="color: var(--shiki-color-text)">  asc </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .................. Optional. False implies descending order.</span></span>\n<span><span style="color: var(--shiki-color-text)">  change </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ................ Optional. True implies sorting based on change percentages.</span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;{0,number,currency}&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Optional. Use this format as default fallback.</span></span>\n<span><span style="color: var(--shiki-color-text)">  timezone </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;GMT+2&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........... Optional. Use this timezone as default fallback.</span></span>\n<span></span>'}),title:"Creating data3d object"}),"\n",(0,o.jsx)(n.h2,{id:"extended-array-functions",children:"Extended Array Functions"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object provides several custom methods that mimic some behaviors of built-in\n",(0,o.jsx)(n.em,{children:"array"})," functions in ",(0,o.jsx)(n.em,{children:"Pine Script"}),". Although it's not possible to directly extend all ",(0,o.jsx)(n.em,{children:"Pine Script's"}),"\n",(0,o.jsx)(n.em,{children:"array"})," functions to the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object due to its complex\ndata structure, these custom methods offer similar functionalities and enhance the manipulation of data within the object."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#set",children:(0,o.jsx)(n.code,{children:"set()"})}),": This method allows you to modify an existing value identified by a primary and data key in the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object. When\nusing this method, the data type of the new value must match the data type of the original value associated with the specified data key.\nRe-sorting of data will be triggered if the data key is used for sorting."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#pk-includes",children:(0,o.jsx)(n.code,{children:"pkIncludes()"})}),": Use this method to search for a specific value within the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object. This method returns a\n",(0,o.jsx)(n.em,{children:"boolean"})," value indicating whether the searching value is present within the values identified with a primary key."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#dk-includes",children:(0,o.jsx)(n.code,{children:"dkIncludes()"})}),": Use this method to search for a specific value within the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object. This method returns a\n",(0,o.jsx)(n.em,{children:"boolean"})," value indicating whether the searching value is present within the values identified with a data key."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#pk-push",children:(0,o.jsx)(n.code,{children:"pkPush()"})}),": This method is used to insert a new primary key and its corresponding key-value pairs at the end of the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object.\nCurrently, you can only push new primary key and key-value pairs. Re-sorting of data will be triggered if data is sorted."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#pk-remove",children:(0,o.jsx)(n.code,{children:"pkRemove()"})}),": Use this method to remove a primary key and its associated key-value pairs from the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object.\nCurrently, you can only remove  primary key and key-value pairs. Re-sorting of data will be\ntriggered if data is sorted."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#sort",children:(0,o.jsx)(n.code,{children:"sort()"})}),": Use this method to sort the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#format",children:(0,o.jsx)(n.code,{children:"format()"})}),": Use this method to set default format for the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object."]}),"\n"]}),"\n",(0,o.jsx)(a,{children:(0,o.jsxs)(n.p,{children:["All the remaining examples below will utilize the ",(0,o.jsx)(n.em,{children:"d3d"})," variable, which represents a ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object that we previously created in\nthe example above."]})}),"\n",(0,o.jsxs)(t,{title:"Extended functions",children:[(0,o.jsx)(n.pre,{language:"js",code:"// Modify main value for the given primary and data key.\nd3d.set(primaryKey = 'AAPL', dataKey = 'open', value = 185.09)\n\n// Modify alternate value for the given primary and data key.\nd3d.set(primaryKey = 'AAPL', dataKey = 'open', value = 185.09, alt = true)\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Modify main value for the given primary and data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">185.09</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Modify alternate value for the given primary and data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">185.09</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"Set"}),(0,o.jsx)(n.pre,{language:"js",code:"// .......................................... Check primary key values:\nd3d.pkIncludes('AAPL', 123.45) // ........... returns true if value found, false otherwise.\nd3d.pkIncludes('AAPL', 123.45, alt = true) // returns true if value found, false otherwise.\n\n// ........................................... Check data key values:\nd3d.dkIncludes('close', 123.45) // ........... returns true if value found, false otherwise.\nd3d.dkIncludes('close', 123.45, alt = true) // returns true if value found, false otherwise.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// .......................................... Check primary key values:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkIncludes</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">123.45</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........... returns true if value found, false otherwise.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkIncludes</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">123.45</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// returns true if value found, false otherwise.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ........................................... Check data key values:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkIncludes</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">123.45</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........... returns true if value found, false otherwise.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkIncludes</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">123.45</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// returns true if value found, false otherwise.</span></span>\n<span></span>'}),title:"Includes"}),(0,o.jsx)(n.pre,{language:"js",code:"googl = pkv( // .......... First create a new pkv object:\n  primaryKey = 'GOOGL', // New unique primary key. \n  getOHLC('GOOGL')) // ... Function to build the pkv object.\n                        // getOHLC() is a helper function we created in a previous example.\n\nd3d.pkPush(pkv = googl) // Insert the new pkv object into the data3d object.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">googl </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">pkv</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// .......... First create a new pkv object:</span></span>\n<span><span style="color: var(--shiki-color-text)">  primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;GOOGL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// New unique primary key. </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">getOHLC</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;GOOGL&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-comment)">// ... Function to build the pkv object.</span></span>\n<span><span style="color: var(--shiki-color-text)">                        </span><span style="color: var(--shiki-token-comment)">// getOHLC() is a helper function we created in a previous example.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkPush</span><span style="color: var(--shiki-color-text)">(pkv </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> googl) </span><span style="color: var(--shiki-token-comment)">// Insert the new pkv object into the data3d object.</span></span>\n<span></span>'}),title:"Push"}),(0,o.jsx)(n.pre,{language:"js",code:"d3d.pkRemove('GOOGL') // Remove the primary key 'GOOGL' and all its key-value pairs.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkRemove</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;GOOGL&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Remove the primary key &#39;GOOGL&#39; and all its key-value pairs.</span></span>\n<span></span>'}),title:"Remove"}),(0,o.jsx)(n.pre,{language:"js",code:"// Sorts in ascending order, using main values of the specified data key.\nd3d.sort(dataKey = 'close') \n\n// Sorts in descending order, using change percent values of the specified data key.\nd3d.sort(dataKey = 'close', asc = false, change = true) \n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Sorts in ascending order, using main values of the specified data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.sort</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Sorts in descending order, using change percent values of the specified data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.sort</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> asc </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> change </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span></span>\n<span></span>'}),title:"Sort"}),(0,o.jsx)(n.pre,{language:"js",code:"kv.format(format = 'kv: {0}', timezone = 'GMT+2') // Set a custom format for a kv object.\nd2d.format('{0,number,#.#}') // ................. Set default format for a data2d object.\nd2d.format('yyyy-MM-dd') // ......... Set a time format. Applies to all timestamp values.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.format</span><span style="color: var(--shiki-color-text)">(format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;kv: {0}&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> timezone </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;GMT+2&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Set a custom format for a kv object.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.format</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;{0,number,#.#}&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ................. Set default format for a data2d object.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.format</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;yyyy-MM-dd&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ......... Set a time format. Applies to all timestamp values.</span></span>\n<span></span>'}),title:"Format"})]}),"\n",(0,o.jsx)(n.h2,{id:"fetch-primary-and-data-keys",children:"Fetch Primary And Data Keys"}),"\n",(0,o.jsxs)(n.p,{children:["To obtain all the primary and data keys stored within the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object, you can use the ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"primaryKeys()"})})," and the ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dataKeys()"})})," methods.\nThese methods return a ",(0,o.jsx)(n.em,{children:"string-array"})," containing all the asscociated keys. The ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"primaryKeys()"})})," preserves the sort order if the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})}),"\nobject is sorted."]}),"\n",(0,o.jsxs)(t,{title:"Fetch keys",children:[(0,o.jsx)(n.pre,{language:"js",code:"d3d.primaryKeys() // returns a string array of all primary keys, sorted if applicable.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.primaryKeys</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a string array of all primary keys, sorted if applicable.</span></span>\n<span></span>'}),title:"Primary keys"}),(0,o.jsx)(n.pre,{language:"js",code:"d3d.dataKeys() // returns a string array of all data keys.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dataKeys</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a string array of all data keys.</span></span>\n<span></span>'}),title:"Data keys."})]}),"\n",(0,o.jsx)(n.h2,{id:"fetch-values",children:"Fetch Values"}),"\n",(0,o.jsxs)(n.p,{children:["To retrieve the values from a ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object, there are multiple methods available depending on your specific needs. If you only intend to display\nthe data, you can use the ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkValues()"})})," or the ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkValues()"})})," methods, which converts all the associated values into ",(0,o.jsx)(n.em,{children:"strings"}),", formats them if\napplicable and returns them as a ",(0,o.jsx)(n.em,{children:"string-array"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["However, if you require the original data type of the values, you should use the corresponding data type methods\navailable for ",(0,o.jsx)(n.a,{href:"/_datad",children:(0,o.jsx)(n.code,{children:"data3d"})}),". The available data type methods are as follows:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Values associated with primary keys:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkStringValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"string-array"})," of all primary key's main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkFloatValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"float-array"})," of all primary key's main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkIntValues()"})}),": Returns an ",(0,o.jsx)(n.em,{children:"integer-array"})," of all primary key's main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkBoolValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"boolean-array"})," of all primary key's main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkColorValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"color-array"})," of all primary key's main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkTimestampValues()"})}),": Returns an ",(0,o.jsx)(n.em,{children:"integer-array"})," of all primary key's main ",(0,o.jsx)(n.em,{children:"timestamp"})," values."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Values associated with data keys:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkStringValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"string-array"})," of all data key's main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkFloatValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"float-array"})," of all data key's main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkIntValues()"})}),": Returns an ",(0,o.jsx)(n.em,{children:"integer-array"})," of all data key's main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkBoolValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"boolean-array"})," of all data key's main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkColorValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"color-array"})," of all data key's main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkTimestampValues()"})}),": Returns an ",(0,o.jsx)(n.em,{children:"integer-array"})," of all data key's main ",(0,o.jsx)(n.em,{children:"timestamp"})," values."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Please note that if the ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object stores multiple types of data, calling any of these data type methods will only\nreturn values that match the specified data type, and ",(0,o.jsx)(n.em,{children:"na"})," for the remaining types. All data key methods maintain the sort order\nif the object is sorted. Sorting does not apply to primary key values."]}),"\n",(0,o.jsxs)(t,{title:"Get values",children:[(0,o.jsx)(n.pre,{language:"js",code:"// ...................................... For display purpose: (uses formatting if applicable)\nd3d.pkValues(primaryKey = 'AAPL') // .................... Returns string-array of main values.\nd3d.pkValues(primaryKey = 'AAPL', alt = true) // ........ Returns string-array of alt values.\n\n// ...................................................... String:\nd3d.pkStringValues(primaryKey = 'AAPL') // .............. Returns string-array of main values.\nd3d.pkStringValues(primaryKey = 'AAPL', alt = true) // .. Returns string-array of alt values.\n\n// ...................................................... Float:\nd3d.pkFloatValues(primaryKey = 'AAPL') // ............... Returns float-array of main values.\nd3d.pkFloatValues(primaryKey = 'AAPL', alt = true) // ... Returns float-array of alt values.\n\n\n// ...................................................... Integer:\nd3d.pkIntValues(primaryKey = 'AAPL') // ................. Returns int-array of main values.\nd3d.pkIntValues(primaryKey = 'AAPL', alt = true) // ..... Returns int-array of alt values.\n\n// ...................................................... Boolean:\nd3d.pkBoolValues(primaryKey = 'AAPL') // ................ Returns bool-array of main values.\nd3d.pkBoolValues(primaryKey = 'AAPL', alt = true) // .... Returns bool-array of alt values.\n\n// ...................................................... Color:\nd3d.pkColorValues(primaryKey = 'AAPL') //  .............. Returns color-array of main values.\nd3d.pkColorValues(primaryKey = 'AAPL', alt = true) // ... Returns color-array of alt values.\n\n// ...................................................... Timestamp:\nd3d.pkTimestampValues(primaryKey = 'AAPL') // ........... Returns int-array of main timestamps.\nd3d.pkTimestampValues(primaryKey = 'AAPL', alt = true) // Returns int-array of alt timestamps.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ...................................... For display purpose: (uses formatting if applicable)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .................... Returns string-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........ Returns string-array of alt values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... String:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkStringValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .............. Returns string-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkStringValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .. Returns string-array of alt values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... Float:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkFloatValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ............... Returns float-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkFloatValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ... Returns float-array of alt values.</span></span>\n<span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... Integer:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkIntValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ................. Returns int-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkIntValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ..... Returns int-array of alt values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... Boolean:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkBoolValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ................ Returns bool-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkBoolValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .... Returns bool-array of alt values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... Color:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkColorValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">//  .............. Returns color-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkColorValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ... Returns color-array of alt values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... Timestamp:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkTimestampValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........... Returns int-array of main timestamps.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkTimestampValues</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Returns int-array of alt timestamps.</span></span>\n<span></span>'}),title:"Primary keys"}),(0,o.jsx)(n.pre,{language:"js",code:"// ....................................... For display purpose: uses formatting if applicable:\nd3d.dkValues(dataKey = 'open') // ....................... Returns string-array of main values.\nd3d.dkValues(dataKey = 'open', alt = true) // ........... Returns string-array of alt values.\n\n// ...................................................... String: (preserves sorting)\nd3d.dkStringValues(dataKey = 'open') // ................. Returns string-array of main values.\nd3d.dkStringValues(dataKey = 'open', alt = true) // ..... Returns string-array of alt values.\n\n// ...................................................... Float: (preserves sorting)\nd3d.dkFloatValues(dataKey = 'open') // .................. Returns float-array of main values.\nd3d.dkFloatValues(dataKey = 'open', alt = true) // ...... Returns float-array of alt values.\n\n\n// ...................................................... Integer: (preserves sorting)\nd3d.dkIntValues(dataKey = 'open') // .................... Returns int-array of main values.\nd3d.dkIntValues(dataKey = 'open', alt = true) // ........ Returns int-array of alt values.\n\n// ...................................................... Boolean: (preserves sorting)\nd3d.dkBoolValues(dataKey = 'open') // ................... Returns bool-array of main values.\nd3d.dkBoolValues(dataKey = 'open', alt = true) // ....... Returns bool-array of alt values.\n\n// ...................................................... Color: (preserves sorting)\nd3d.dkColorValues(dataKey = 'open') //  ................. Returns color-array of main values.\nd3d.dkColorValues(dataKey = 'open', alt = true) // ...... Returns color-array of alt values.\n\n// ...................................................... Timestamp: (preserves sorting)\nd3d.dkTimestampValues(dataKey = 'open') // .............. Returns int-array of main timestamps.\nd3d.dkTimestampValues(dataKey = 'open', alt = true) // .. Returns int-array of alt timestamps.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ....................................... For display purpose: uses formatting if applicable:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ....................... Returns string-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........... Returns string-array of alt values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... String: (preserves sorting)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkStringValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ................. Returns string-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkStringValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ..... Returns string-array of alt values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... Float: (preserves sorting)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkFloatValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .................. Returns float-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkFloatValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ...... Returns float-array of alt values.</span></span>\n<span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... Integer: (preserves sorting)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkIntValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .................... Returns int-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkIntValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........ Returns int-array of alt values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... Boolean: (preserves sorting)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkBoolValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ................... Returns bool-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkBoolValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ....... Returns bool-array of alt values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... Color: (preserves sorting)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkColorValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">//  ................. Returns color-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkColorValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ...... Returns color-array of alt values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ...................................................... Timestamp: (preserves sorting)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkTimestampValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .............. Returns int-array of main timestamps.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkTimestampValues</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .. Returns int-array of alt timestamps.</span></span>\n<span></span>'}),title:"Data keys"})]}),"\n",(0,o.jsx)(n.h2,{id:"fetch-single-value",children:"Fetch Single Value"}),"\n",(0,o.jsxs)(n.p,{children:["To retrieve the value for a specific primary and data key from a ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," object, there are multiple methods available depending on\nyour specific needs. If you only intend to display the value, you can use the ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"get()"})})," method, which converts the data into a string, formats\nit if applicable and returns it."]}),"\n",(0,o.jsxs)(n.p,{children:["However, if you require the original data type of the value, you should use the corresponding data type methods\navailable for ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})}),". The available data type methods are as follows:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"get()"})}),": Returns the value for the specified primary and data key as a ",(0,o.jsx)(n.em,{children:"string"}),", formatted if applicable."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getString()"})}),": Returns the value for the specified primary and data key as a ",(0,o.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getFloat()"})}),": Returns the value for the specified primary and data key as a ",(0,o.jsx)(n.em,{children:"float"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getInt()"})}),": Returns the value for the specified primary and data key as an ",(0,o.jsx)(n.em,{children:"integer"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getBool()"})}),": Returns the value for the specified primary and data key as a ",(0,o.jsx)(n.em,{children:"boolean"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getColor()"})}),": Returns the value for the specified primary and data key as a ",(0,o.jsx)(n.em,{children:"color"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getTimestamp()"})}),": Returns the value for the specified primary and data key as a ",(0,o.jsx)(n.em,{children:"timestamp"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Please note that if the data you are requesting does not match the data type of the corresponding method, the method\nwill return ",(0,o.jsx)(n.em,{children:"na"}),", indicating that the requested data type is not available for the specified primary and data key."]}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"// .................................... For display purpose: (uses formatting if applicable)\nd3d.get(primaryKey = 'AAPL', dataKey = 'close') // Returns main string value for key 'open'.\nd3d.get('AAPL', 'close', alt = true) // .......... Returns alt string value for key 'open'.\n\n// ..................................................... String:\nd3d.getString(primaryKey = 'AAPL', dataKey = 'close') // Returns the main string value.\nd3d.getString('AAPL', 'close', alt = true) // .......... Returns the alt string value.\n\n// .................................................... Float:\nd3d.getFloat(primaryKey = 'AAPL', dataKey = 'close') // Returns the main float value.\nd3d.getFloat('AAPL', 'close', alt = true) // .......... Returns the alt float value.\n\n// .................................................. Integer:\nd3d.getInt(primaryKey = 'AAPL', dataKey = 'close') // Returns the main integer value.\nd3d.getInt('AAPL', 'close', alt = true) // .......... Returns the alt integer value.\n\n// ................................................... Boolean:\nd3d.getBool(primaryKey = 'AAPL', dataKey = 'close') // Returns the main boolean value.\nd3d.getBool('AAPL', 'close', alt = true) // .......... Returns the alt boolean value.\n\n// .................................................... Color:\nd3d.getColor(primaryKey = 'AAPL', dataKey = 'close') // Returns the main color value.\nd3d.getColor('AAPL', 'close', alt = true) // .......... Returns the alt color value.\n\n// ........................................................ Timestamp:\nd3d.getTimestamp(primaryKey = 'AAPL', dataKey = 'close') // Returns the main timestamp value.\nd3d.getTimestamp('AAPL', 'close', alt = true) // .......... Returns the alt timestamp value.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// .................................... For display purpose: (uses formatting if applicable)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Returns main string value for key &#39;open&#39;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .......... Returns alt string value for key &#39;open&#39;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ..................................................... String:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getString</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Returns the main string value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getString</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .......... Returns the alt string value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// .................................................... Float:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getFloat</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Returns the main float value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getFloat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .......... Returns the alt float value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// .................................................. Integer:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getInt</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Returns the main integer value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getInt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .......... Returns the alt integer value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ................................................... Boolean:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getBool</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Returns the main boolean value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getBool</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .......... Returns the alt boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// .................................................... Color:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getColor</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Returns the main color value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getColor</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .......... Returns the alt color value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ........................................................ Timestamp:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getTimestamp</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Returns the main timestamp value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.getTimestamp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;AAPL&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .......... Returns the alt timestamp value.</span></span>\n<span></span>'}),title:"Get value"}),"\n",(0,o.jsx)(n.h2,{id:"comparison",children:"Comparison"}),"\n",(0,o.jsxs)(n.p,{children:["Just like ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})}),", ",(0,o.jsx)(n.a,{href:"/_data3d",children:(0,o.jsx)(n.code,{children:"data3d"})})," also offers similar comparison methods, enabling effortless comparisons of each main value with its corresponding alternate value. All comparison methods maintain sorting order if applicable. The following comparison methods are available:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"et()"})}),": Checks ",(0,o.jsx)(n.em,{children:"equality"}),", for a single data identified by a primary and a data key. Use ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkEt()"})})," or ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkEt()"})}),"\nto check all their corresponding values. ",(0,o.jsx)(n.em,{children:"(main == alt)"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"gt()"})}),": Checks ",(0,o.jsx)(n.em,{children:"greater than"}),", for a single data identified by a primary and a data key. Use ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkGt()"})})," or ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkGt()"})}),"\nto check all their corresponding values. ",(0,o.jsx)(n.em,{children:"(main > alt)"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"gte()"})}),": Checks ",(0,o.jsx)(n.em,{children:"greater than or equal to"}),", for a single data identified by a primary and a data key. Use ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkGte()"})})," or ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkGte()"})}),"\nto check all their corresponding values. ",(0,o.jsx)(n.em,{children:"(main ≥ alt)"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"lt()"})}),": Checks ",(0,o.jsx)(n.em,{children:"less than"}),", for a single data identified by a primary and a data key.Use ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkLt()"})})," or ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkLt()"})}),"\nto check all their corresponding values. ",(0,o.jsx)(n.em,{children:"(main < alt)"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"lte()"})}),": Checks ",(0,o.jsx)(n.em,{children:"less than or equal to"}),", for a single data identified by a primary and a data key. Use ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkLte()"})})," or ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkLte()"})}),"\nto check all their corresponding values. ",(0,o.jsx)(n.em,{children:"(main ≤ alt)"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"change()"})}),": Calculates the difference for a single data identified by a primary and a data key. Use ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkChange()"})})," or ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkChange()"})}),"\nto check all their corresponding values. USe percent"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"changeF()"})}),": Formatted difference for a single data identified by a primary and a data key. Use ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkChangeF()"})})," or ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkChangeF()"})}),"\nto check all their corresponding values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"timestamp()"})}),": Segmented time difference for a single data identified by a primary and a data key. Use ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"pkTimestamp()"})})," or ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"dkTimestamp()"})}),"\nto check all their corresponding values."]}),"\n"]}),"\n",(0,o.jsxs)(t,{title:"Compare",children:[(0,o.jsx)(n.pre,{language:"js",code:"// ....... Checks 'equality' on a single data for a primary and a data key.\nd3d.et(primaryKey = 'AMZN', dataKey = 'close') //  Returns a boolean value.\n\n//  Checks 'equality' on all data for a primary key. (preserves sort order)\nd3d.pkEt(primaryKey = 'AMZN') // ................. Returns a boolean array.\n\n// .......................... Checks 'equality' on all data for a data key.\nd3d.dkEt(dataKey = 'AMZN') // .................... Returns a boolean array.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ....... Checks &#39;equality&#39; on a single data for a primary and a data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.et</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">//  Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">//  Checks &#39;equality&#39; on all data for a primary key. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkEt</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ................. Returns a boolean array.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// .......................... Checks &#39;equality&#39; on all data for a data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkEt</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .................... Returns a boolean array.</span></span>\n<span></span>'}),title:"main == alt"}),(0,o.jsx)(n.pre,{language:"js",code:"// ...... Checks 'greater than' on a single data for a primary and a data key.\nd3d.gt(primaryKey = 'AMZN', dataKey = 'close') // ... Returns a boolean value.\n\n// Checks 'greater than' on all data for a primary key. (preserves sort order)\nd3d.pkGt(primaryKey = 'AMZN') // .................... Returns a boolean array.\n\n// ......................... Checks 'greater than' on all data for a data key.\nd3d.dkGt(dataKey = 'AMZN') // ....................... Returns a boolean array.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ...... Checks &#39;greater than&#39; on a single data for a primary and a data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.gt</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ... Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Checks &#39;greater than&#39; on all data for a primary key. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkGt</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .................... Returns a boolean array.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ......................... Checks &#39;greater than&#39; on all data for a data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkGt</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ....................... Returns a boolean array.</span></span>\n<span></span>'}),title:"main > alt"}),(0,o.jsx)(n.pre,{language:"js",code:"// ...... Checks 'greater than or equal to' on a single data for a primary and a data key.\nd3d.gte(primaryKey = 'AMZN', dataKey = 'close') // .............. Returns a boolean value.\n\n// Checks 'greater than or equal to' on all data for a primary key. (preserves sort order)\nd3d.pkGte(primaryKey = 'AMZN') // ............................... Returns a boolean array.\n\n// ......................... Checks 'greater than or equal to' on all data for a data key.\nd3d.dkGte(dataKey = 'AMZN') // .................................. Returns a boolean array.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ...... Checks &#39;greater than or equal to&#39; on a single data for a primary and a data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.gte</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .............. Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Checks &#39;greater than or equal to&#39; on all data for a primary key. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkGte</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ............................... Returns a boolean array.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ......................... Checks &#39;greater than or equal to&#39; on all data for a data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkGte</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .................................. Returns a boolean array.</span></span>\n<span></span>'}),title:"main ≥ alt"}),(0,o.jsx)(n.pre,{language:"js",code:"// ...... Checks 'less than' on a single data for a primary and a data key.\nd3d.lt(primaryKey = 'AMZN', dataKey = 'close') //  Returns a boolean value.\n\n// Checks 'less than' on all data for a primary key. (preserves sort order)\nd3d.pkLt(primaryKey = 'AMZN') // ................. Returns a boolean array.\n\n// ......................... Checks 'less than' on all data for a data key.\nd3d.dkLt(dataKey = 'AMZN') // .................... Returns a boolean array.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ...... Checks &#39;less than&#39; on a single data for a primary and a data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.lt</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">//  Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Checks &#39;less than&#39; on all data for a primary key. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkLt</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ................. Returns a boolean array.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ......................... Checks &#39;less than&#39; on all data for a data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkLt</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .................... Returns a boolean array.</span></span>\n<span></span>'}),title:"main < alt"}),(0,o.jsx)(n.pre,{language:"js",code:"// ...... Checks 'less than or equal to' on a single data for a primary and a data key.\nd3d.lte(primaryKey = 'AMZN', dataKey = 'close') // ........... Returns a boolean value.\n\n// Checks 'less than or equal to' on all data for a primary key. (preserves sort order)\nd3d.pkLte(primaryKey = 'AMZN') // ............................ Returns a boolean array.\n\n// ......................... Checks 'less than or equal to' on all data for a data key.\nd3d.dkLte(dataKey = 'AMZN') // ............................... Returns a boolean array.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ...... Checks &#39;less than or equal to&#39; on a single data for a primary and a data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.lte</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........... Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Checks &#39;less than or equal to&#39; on all data for a primary key. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkLte</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ............................ Returns a boolean array.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ......................... Checks &#39;less than or equal to&#39; on all data for a data key.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkLte</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ............................... Returns a boolean array.</span></span>\n<span></span>'}),title:"main ≤ alt"})]}),"\n",(0,o.jsxs)(t,{title:"Change",children:[(0,o.jsx)(n.pre,{language:"js",code:"// Returns the difference of a primary key and a data key's value.\nd3d.change(primaryKey = 'AMZN', dataKey = 'close')\n\n// Returns all the differences of a primary key in an array. \nd3d.pkChange(primaryKey = 'AMZN') // (preserves sort order)\n\n// Returns all the differences of a data key in an array.\nd3d.dkChange(dataKey = 'AMZN')\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Returns the difference of a primary key and a data key&#39;s value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.change</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Returns all the differences of a primary key in an array. </span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkChange</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// (preserves sort order)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Returns all the differences of a data key in an array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkChange</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"Difference"}),(0,o.jsx)(n.pre,{language:"js",code:"// Returns the percentage difference of a primary key and a data key's value.\nd3d.change(primaryKey = 'AMZN', dataKey = 'close', percent = true)\n\n// Returns all the percentage differences of a primary key in an array. \nd3d.pkChange(primaryKey = 'AMZN', percent = true) // (preserves sort order)\n\n// Returns all the percentage differences of a data key in an array.\nd3d.dkChange(dataKey = 'AMZN', percent = true)\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Returns the percentage difference of a primary key and a data key&#39;s value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.change</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> percent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Returns all the percentage differences of a primary key in an array. </span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkChange</span><span style="color: var(--shiki-color-text)">(primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> percent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// (preserves sort order)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Returns all the percentage differences of a data key in an array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkChange</span><span style="color: var(--shiki-color-text)">(dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> percent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"Percent"}),(0,o.jsx)(n.pre,{language:"js",code:"// Returns the formatted difference of a primary key and a data key's value.\nd3d.changeF(\n  primaryKey = 'AMZN', \n  dataKey = 'close', \n  format = '{0,number,#}') // Optional. Provide a custom format.\n\n// Returns all the formatted differences of a primary key in an array.\nd3d.pkChangeF( // (preserves sort order)\n  primaryKey = 'AMZN', \n  format = '{0,number,#}')  // Optional. Provide a custom format.\n\n// Returns all the formatted differences of a data key in an array.\nd3d.dkChangeF(\n  dataKey = 'AMZN', \n  format = '{0,number,#}') // Optional. Provide a custom format.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Returns the formatted difference of a primary key and a data key&#39;s value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.changeF</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;{0,number,#}&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Optional. Provide a custom format.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Returns all the formatted differences of a primary key in an array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkChangeF</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-color-text)">  primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;{0,number,#}&#39;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// Optional. Provide a custom format.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Returns all the formatted differences of a data key in an array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkChangeF</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;{0,number,#}&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Optional. Provide a custom format.</span></span>\n<span></span>'}),title:"Formatted difference"}),(0,o.jsx)(n.pre,{language:"js",code:"// Returns the formatted percentage difference of a primary key and a data key's value.\nd3d.changeF(\n  primaryKey = 'AMZN', \n  dataKey = 'close', \n  percent = true,\n  format = '{0,number,#}') // Optional. Provide a custom format.\n\n// Returns all the formatted percentage differences of a primary key in an array.\nd3d.pkChangeF( // (preserves sort order)\n  primaryKey = 'AMZN',\n  percent = true,\n  format = '{0,number,#}')  // Optional. Provide a custom format.\n\n// Returns all the formatted percentage differences of a data key in an array.\nd3d.dkChangeF(\n  dataKey = 'AMZN',\n  percent = true,\n  format = '{0,number,#}') // Optional. Provide a custom format.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Returns the formatted percentage difference of a primary key and a data key&#39;s value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.changeF</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  percent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;{0,number,#}&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Optional. Provide a custom format.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Returns all the formatted percentage differences of a primary key in an array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkChangeF</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-color-text)">  primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  percent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;{0,number,#}&#39;</span><span style="color: var(--shiki-color-text)">)  </span><span style="color: var(--shiki-token-comment)">// Optional. Provide a custom format.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Returns all the formatted percentage differences of a data key in an array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkChangeF</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AMZN&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  percent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;{0,number,#}&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Optional. Provide a custom format.</span></span>\n<span></span>'}),title:"Formatted percent"})]}),"\n",(0,o.jsx)(t,{title:"Timestamp",children:(0,o.jsx)(n.pre,{language:"js",code:"// Get time difference of a primary key and a data key's value.\nd3d.timestampChange( // .... Returns a string with time segments.\n  primaryKey = 'open',\n  dataKey = 'open',\n  years = true, // ......... Switch to turn on/off the years segment. Default is false.\n  months = false, // ....... Switch to turn on/off the months segment. Default is false.\n  weeks = false, // ........ Switch to turn on/off the weeks segment. Default is false.\n  days = true, // .......... Switch to turn on/off the days segment. Default is true.\n  hours = true, // ......... Switch to turn on/off the hours segment. Default is true.\n  minutes = true, // ....... Switch to turn on/off the minutes segment. Default is true.\n  seconds = true) // ....... Switch to turn on/off the seconds segment. Default is true.\n\n// Returns all the time differences of a primary key in an array. \nd3d.pkTimestampChange( // .. Returns an array of strings with time segments.\n  primaryKey = 'open',\n  years = true, // ......... Switch to turn on/off the years segment. Default is false.\n  months = false, // ....... Switch to turn on/off the months segment. Default is false.\n  weeks = false, // ........ Switch to turn on/off the weeks segment. Default is false.\n  days = true, // .......... Switch to turn on/off the days segment. Default is true.\n  hours = true, // ......... Switch to turn on/off the hours segment. Default is true.\n  minutes = true, // ....... Switch to turn on/off the minutes segment. Default is true.\n  seconds = true) // ....... Switch to turn on/off the seconds segment. Default is true.\n\n// Returns all the time differences of a data key in an array. \nd3d.dkTimestampChange( // .... Returns an array of strings with time segments.\n  dataKey = 'open',\n  years = true, // ......... Switch to turn on/off the years segment. Default is false.\n  months = false, // ....... Switch to turn on/off the months segment. Default is false.\n  weeks = false, // ........ Switch to turn on/off the weeks segment. Default is false.\n  days = true, // .......... Switch to turn on/off the days segment. Default is true.\n  hours = true, // ......... Switch to turn on/off the hours segment. Default is true.\n  minutes = true, // ....... Switch to turn on/off the minutes segment. Default is true.\n  seconds = true) // ....... Switch to turn on/off the seconds segment. Default is true.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Get time difference of a primary key and a data key&#39;s value.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.timestampChange</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// .... Returns a string with time segments.</span></span>\n<span><span style="color: var(--shiki-color-text)">  primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  years </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Switch to turn on/off the years segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  months </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the months segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  weeks </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ........ Switch to turn on/off the weeks segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  days </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .......... Switch to turn on/off the days segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  hours </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Switch to turn on/off the hours segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  minutes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the minutes segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  seconds </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the seconds segment. Default is true.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Returns all the time differences of a primary key in an array. </span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.pkTimestampChange</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// .. Returns an array of strings with time segments.</span></span>\n<span><span style="color: var(--shiki-color-text)">  primaryKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  years </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Switch to turn on/off the years segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  months </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the months segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  weeks </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ........ Switch to turn on/off the weeks segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  days </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .......... Switch to turn on/off the days segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  hours </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Switch to turn on/off the hours segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  minutes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the minutes segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  seconds </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the seconds segment. Default is true.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Returns all the time differences of a data key in an array. </span></span>\n<span><span style="color: var(--shiki-token-constant)">d3d</span><span style="color: var(--shiki-token-function)">.dkTimestampChange</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// .... Returns an array of strings with time segments.</span></span>\n<span><span style="color: var(--shiki-color-text)">  dataKey </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  years </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Switch to turn on/off the years segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  months </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the months segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  weeks </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ........ Switch to turn on/off the weeks segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  days </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .......... Switch to turn on/off the days segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  hours </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Switch to turn on/off the hours segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  minutes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the minutes segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  seconds </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the seconds segment. Default is true.</span></span>\n<span></span>'}),title:"Timestamp"})})]})}var r=!0;function i(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,e.ah)(),s.components);return n?(0,o.jsx)(n,Object.assign({},s,{children:(0,o.jsx)(t,s)})):t(s)}}},function(s){s.O(0,[774,888,179],function(){return s(s.s=2022)}),_N_E=s.O()}]);