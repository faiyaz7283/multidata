(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[890],{8909:function(s,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/data2d",function(){return a(8412)}])},8412:function(s,n,a){"use strict";a.r(n),a.d(n,{__N_SSG:function(){return r}});var o=a(5893),e=a(1151);function t(s){let n=Object.assign({h1:"h1",p:"p",a:"a",code:"code",em:"em",h2:"h2",ul:"ul",li:"li",strong:"strong",pre:"pre",ol:"ol",br:"br"},(0,e.ah)(),s.components),{CodeGroup:a,Note:t}=n;return a||l("CodeGroup",!0),t||l("Note",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{children:"Data2d"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," data structure serves as a versatile solution for storing key-value pairs in ",(0,o.jsx)(n.em,{children:"Pine Script"}),". Unlike the standard\n",(0,o.jsx)(n.em,{children:"arrays"})," in ",(0,o.jsx)(n.em,{children:"Pine Script"}),", which are limited to storing single type values and do not offer key associations, ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," allows\nyou to store multiple types of data and associate each value with a unique key. This unique feature enables more advanced data management\nand analysis within ",(0,o.jsx)(n.em,{children:"Pine Script's"})," indicators, strategies and libraries."]}),"\n",(0,o.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,o.jsxs)(n.p,{children:["To achieve the functionality of storing key-value pairs with multiple types of data, ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," relies on another custom object\ncalled ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," ",(0,o.jsx)(n.em,{children:"(key-value)"}),". The ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})}),"  object acts as a container for a single key with its corresponding value. By utilizing\nthese ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})}),"  objects within an ",(0,o.jsx)(n.em,{children:"array"})," and pushing them onto a ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object, we create a robust system for key-value\nstorage."]}),"\n",(0,o.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,o.jsxs)(n.p,{children:["In addition to basic key-value pairing, the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object offers several powerful features:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Storing Alternate Values:"}),' Each key-value pair can store an alternate value, enabling the association of two values under\none key. This key-value-alternate pairing proves particularly valuable when working with data that requires multiple associated\nvalues, such as storing both the current and last closing prices under the same key "close". It\'s important to note that the\nalternate value MUST be of the same data type as the original value. For added convenience, ',(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," provides numerous built-in\ncomparison methods that work seamlessly with ",(0,o.jsx)(n.em,{children:"key-value-alternate"})," pairs."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Comparison With Alternate:"})," The ability to store alternate values brings with it the convenience of built-in comparison methods. You can\nperform multiple comparison operations to compare main values with their corresponding alternate values. Additionally, you can effortlessly\nobtain the change difference and change percentage between the main and alternate values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Storing Unix Timestamps:"})," The ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object offers the capability to store ",(0,o.jsx)(n.em,{children:"Unix timestamps"})," as a distinct data type. This\nfeature greatly simplifies the handling of ",(0,o.jsx)(n.em,{children:"timestamp"})," values. You can effortlessly store, retrieve, and display ",(0,o.jsx)(n.em,{children:"timestamps"})," with the\n",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object. By default, it presents ",(0,o.jsx)(n.em,{children:"Unix timestamp"})," values in a human-readable format. You have the flexibility to customize\nthis formatting according to your preferences. Additionally, the utility of alternate values can be fully leveraged for ",(0,o.jsx)(n.em,{children:"timestamps"}),", as the\n",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object includes built-in comparison methods specifically designed for ",(0,o.jsx)(n.em,{children:"timestamp"})," comparisons."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Automatic Formatting:"}),"  The ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object automatically formats and stores the formatted version of each data entry,\nleveraging formatting options when available. This feature is especially useful when dealing with timestamps or other complex\ndata types, simplifying data management and enhancing readability."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Sorting Capability:"})," Similar to ",(0,o.jsx)(n.em,{children:"Pine Script's arrays"}),", the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object supports data sorting. However, unlike standard\n",(0,o.jsx)(n.em,{children:"arrays"}),", it allows sorting for all data types, not limited to\n",(0,o.jsx)(n.em,{children:"integers"})," and ",(0,o.jsx)(n.em,{children:"floats"}),". To ensure successful sorting, a single ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})}),"\nobject must hold values of only one data type. Attempting to sort a ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object with mixed data types will result in an\ninvalid operation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Extended Array Functions:"})," The ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object extends some array functions, granting direct access to familiar array\nmanipulations directly within the object. This streamlines data manipulation operations, making it easier and more\nintuitive to work with ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," objects."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"setup-keys-and-values",children:"Setup Keys And Values"}),"\n",(0,o.jsxs)(n.p,{children:["To construct a single key-value pair, the recommended approach is to use the ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv-2",children:(0,o.jsx)(n.code,{children:"kv()"})})," method. This method accepts the following four\nparameters:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"this:"})," A string object, used as the ",(0,o.jsx)(n.em,{children:"key"})," identifier."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"val:"})," The ",(0,o.jsx)(n.em,{children:"val"})," parameter denotes the main value to be stored under the specified key."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"altVal:"})," The ",(0,o.jsx)(n.em,{children:"altVal"})," parameter allows the inclusion of an alternate value for the same key. This proves useful when there is a\nneed to associate two different values under one key."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"format:"})," The ",(0,o.jsx)(n.em,{children:"format"})," parameter provides the option to set a custom format for the individual key. This custom format will take\nprecedence over the global format set on the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object."]}),"\n"]}),"\n",(0,o.jsxs)(a,{title:"Creating kv objects",children:[(0,o.jsx)(n.pre,{language:"js",code:"_open  = kv(this = 'open', val = open)\n_high  = kv(this = 'high', val = high)\n_low   = kv(this = 'low', val = low)\n_close = kv(this = 'close', val = close)\n\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">_open  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> open)</span></span>\n<span><span style="color: var(--shiki-color-text)">_high  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> high)</span></span>\n<span><span style="color: var(--shiki-color-text)">_low   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> low)</span></span>\n<span><span style="color: var(--shiki-color-text)">_close </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> close)</span></span>\n<span></span>\n<span></span>'}),title:"Simple"}),(0,o.jsx)(n.pre,{language:"js",code:"// Using the altVal parameter.\n_open  = kv(this = 'open', val = open, altVal = open[1])\n_high  = kv(this = 'high', val = high, altVal = high[1])\n_low   = kv(this = 'low', val = low, altVal = low[1])\n_close = kv(this = 'close', val = close, altVal = close[1])\n\n// or\n\n// Using the alt() method. You can chain them for convenience.\n_open  = kv(this = 'open', val = open).alt(open[1])\n_high  = kv(this = 'high', val = high).alt(high[1])\n_low   = kv(this = 'low', val = low).alt(low[1])\n_close = kv(this = 'close', val = close).alt(close[1])\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Using the altVal parameter.</span></span>\n<span><span style="color: var(--shiki-color-text)">_open  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> open</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> altVal </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> open[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span></span>\n<span><span style="color: var(--shiki-color-text)">_high  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> high</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> altVal </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> high[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span></span>\n<span><span style="color: var(--shiki-color-text)">_low   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> low</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> altVal </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> low[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span></span>\n<span><span style="color: var(--shiki-color-text)">_close </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> close</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> altVal </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> close[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// or</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Using the alt() method. You can chain them for convenience.</span></span>\n<span><span style="color: var(--shiki-color-text)">_open  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> open)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(open[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span></span>\n<span><span style="color: var(--shiki-color-text)">_high  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> high)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(high[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span></span>\n<span><span style="color: var(--shiki-color-text)">_low   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> low)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(low[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span></span>\n<span><span style="color: var(--shiki-color-text)">_close </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> close)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(close[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span></span>\n<span></span>'}),title:"Alternate"}),(0,o.jsx)(n.pre,{language:"js",code:"// Using the format parameter.\n_open  = kv(this = 'open', val = open, format = 'Open: {0,number,currency}')\n_high  = kv(this = 'high', val = high, format = 'High: {0,number,currency}')\n_low   = kv(this = 'low', val = low, format = 'Low: {0,number,currency}')\n_close = kv(this = 'close', val = close, format = 'Close: {0,number,currency}')\n\n// or\n\n// Using the format() method. You can chain them for convenience.\n_open  = kv(this = 'open', val = open).format(\"Open: {0,number,currency}\")\n_high  = kv(this = 'high', val = high).forma(\"High: {0,number,currency}\")\n_low   = kv(this = 'low', val = low).format(\"Low: {0,number,currency}\")\n_close = kv(this = 'close', val = close).format(\"Close: {0,number,currency}\")\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Using the format parameter.</span></span>\n<span><span style="color: var(--shiki-color-text)">_open  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> open</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Open: {0,number,currency}&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">_high  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> high</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;High: {0,number,currency}&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">_low   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> low</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Low: {0,number,currency}&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">_close </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> close</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Close: {0,number,currency}&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// or</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Using the format() method. You can chain them for convenience.</span></span>\n<span><span style="color: var(--shiki-color-text)">_open  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> open)</span><span style="color: var(--shiki-token-function)">.format</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Open: {0,number,currency}&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">_high  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;high&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> high)</span><span style="color: var(--shiki-token-function)">.forma</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;High: {0,number,currency}&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">_low   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> low)</span><span style="color: var(--shiki-token-function)">.format</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Low: {0,number,currency}&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">_close </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;close&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> close)</span><span style="color: var(--shiki-token-function)">.format</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Close: {0,number,currency}&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"Format"})]}),"\n",(0,o.jsxs)(n.p,{children:["Once you have your ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," objects created, store them in an ",(0,o.jsx)(n.em,{children:"array"}),". We will use this array on later examples when we initiate\nour ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object."]}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"_kvs_ = array.from(_open, _high, _low, _close)\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">_kvs_ </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(_open</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _high</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _low</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _close)</span></span>\n<span></span>'}),title:"Store kv objects in array"}),"\n",(0,o.jsx)(n.h2,{id:"exploring-data-types",children:"Exploring Data Types"}),"\n",(0,o.jsxs)(n.p,{children:["One of the key strengths of the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," data structure is its versatility in handling various data types. It provides the\ncapability to store six different data types, and there is no restriction on selecting just one type at a time. Instead, you can combine\nmultiple data types within a single ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object. The supported data types for ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," are as follows:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"string:"})," Represents string values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"float:"})," Represents floating-point numbers (decimals)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"int:"})," Represents integers (whole numbers)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"bool:"})," Represents boolean values (true or false)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"color:"})," Represents color values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"timestamp:"})," Represents Unix-timestamp in milliseconds. Although ",(0,o.jsx)(n.em,{children:"timestamps"})," are internally built using the ",(0,o.jsx)(n.em,{children:"int"})," data\ntype, ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," creates a clear distinction between ",(0,o.jsx)(n.em,{children:"integers"})," and ",(0,o.jsx)(n.em,{children:"timestamps"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Let's explore some examples and variations that demonstrate working with multiple data types in ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})}),":"]}),"\n",(0,o.jsxs)(a,{title:"Multiple data type examples",children:[(0,o.jsx)(n.pre,{language:"js",code:"string1 = kv('string1', 'Apple').alt('aapl')\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">string1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;string1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Apple&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;aapl&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"String"}),(0,o.jsx)(n.pre,{language:"js",code:"float1 = kv('float1', 48.981).alt(125.09)\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">float1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;float1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">48.981</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">125.09</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"Float"}),(0,o.jsx)(n.pre,{language:"js",code:"int1 = kv('int1', 35).alt(46)\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">int1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;int1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">35</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">46</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"Integer"}),(0,o.jsx)(n.pre,{language:"js",code:"bool1 = kv('bool1', true).alt(false)\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">bool1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bool1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"Boolean"}),(0,o.jsx)(n.pre,{language:"js",code:"color1 = kv('color1', #FF0000).alt(#FF1D25)\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">color1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> #</span><span style="color: var(--shiki-token-constant)">FF0000</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(#</span><span style="color: var(--shiki-token-constant)">FF1D25</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"Color"}),(0,o.jsx)(n.pre,{language:"js",code:"// REQUIRED: `timestamp = true`.\n// If you don't use the timestamp parameter, data2d will assume its an integer value.\ntime1 = kv(\n  this = 'time1',\n  val = 1695618954000,\n  altVal = 1192002131000,\n  timestamp = true,\n  timezone = 'America/Los_Angeles',\n  format = 'yyyy-MM-dd')\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// REQUIRED: `timestamp = true`.</span></span>\n<span><span style="color: var(--shiki-token-comment)">// If you don&#39;t use the timestamp parameter, data2d will assume its an integer value.</span></span>\n<span><span style="color: var(--shiki-color-text)">time1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;time1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  val </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1695618954000</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  altVal </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1192002131000</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  timestamp </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  timezone </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;America/Los_Angeles&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;yyyy-MM-dd&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"Timestamp"}),(0,o.jsx)(n.pre,{language:"js",code:"// Combine any number of data types.\nstring1 = kv('string1', 'Apple').alt('aapl')\nfloat1  = kv('float1', 48.981).alt(125.09)\nint1    = kv('int1', 35).alt(46)\nbool1   = kv('bool1', true).alt(false)\ncolor1  = kv('color1', #FF0000).alt(#FF1D25)\ntime1   = kv('time1', 1695618954000, timestamp = true).alt(1192002131000)\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Combine any number of data types.</span></span>\n<span><span style="color: var(--shiki-color-text)">string1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;string1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Apple&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;aapl&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">float1  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;float1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">48.981</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">125.09</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">int1    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;int1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">35</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">46</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">bool1   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bool1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">color1  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> #</span><span style="color: var(--shiki-token-constant)">FF0000</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(#</span><span style="color: var(--shiki-token-constant)">FF1D25</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">time1   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">kv</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;time1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1695618954000</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> timestamp </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.alt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1192002131000</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>'}),title:"Mixed types"})]}),"\n",(0,o.jsxs)(n.p,{children:["Once you have created your ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," objects, you can store them in an ",(0,o.jsx)(n.em,{children:"array"}),". Since the ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," objects handle the\nassociation of keys with their respective values, the data type of the underlying values is not an issue for\n",(0,o.jsx)(n.em,{children:"Pine Script"}),". For example, let's use the ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," objects from the mixed types example above:"]}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"_kvs_ = array.from(string1, float1, int1, bool1, color1, time1)\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">_kvs_ </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(string1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> float1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> int1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bool1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> color1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> time1)</span></span>\n<span></span>'}),title:"Store kv objects in array"}),"\n",(0,o.jsx)(n.h2,{id:"create-data2d-object",children:"Create Data2d Object"}),"\n",(0,o.jsxs)(n.p,{children:["To instantiate a ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object, you will need to pass an ",(0,o.jsx)(n.em,{children:"array"}),"\nof ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," objects to the recommended ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"data2d()"})})," function. This function ensures that all keys are unique and performs essential internal\nfunctions to create the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object efficiently. The ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"data2d()"})})," function accepts five parameters:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"kvs:"})," An ",(0,o.jsx)(n.em,{children:"array"})," of ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," objects containing key-value pairs.\nThese pairs will form the basis of the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"sort:"})," An optional ",(0,o.jsx)(n.em,{children:"boolean"})," flag that indicates whether the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object should be sorted. If set to true, the data will be\nsorted; otherwise, it will retain its original order. Data2d containing mixed types cannot be sorted."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"asc:"})," An optional ",(0,o.jsx)(n.em,{children:"boolean"})," flag that specifies the sorting order. When set to true,\nthe data will be sorted in ascending order; when set to false, it will be sorted in descending order. This parameter is effective only when sort\nis set to true."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"change:"})," An optional ",(0,o.jsx)(n.em,{children:"boolean"})," flag used in the context of sorting within the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})}),"\nobject. When set to true, it indicates that the sorting should be based on the change percentage values. These change percentages are calculated\nusing the main and alternate values. It's important to note that this functionality only works when alternate values are available."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"format:"})," An optional parameter that sets the global format for the entire ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object. This format will be applied\nto all the values within the object. Individual keys with custom format will be ignored."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"timezone:"})," An optional parameter that specifies the timezone used for any ",(0,o.jsx)(n.em,{children:"timestamp"})," related values within the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object. By\ndefault, it uses the chart's timezone."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Let's explore some examples and variations of creating a ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object using the ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"data2d()"})})," method:"]}),"\n",(0,o.jsx)(t,{children:(0,o.jsxs)(n.p,{children:["The following example utilizes the ",(0,o.jsx)(n.em,{children:"_kvs_"})," variable, which represents an array of ",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," objects that we previously created in the examples above."]})}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"d2d = data2d(\n  kvs = _kvs_, // .................. Required. An array of kv objects.\n  sort = true, // .................. Optional. Sort the data2d object.\n  asc = false, // .................. Optional. False implies descending order.\n  change = true, // ................ Optional. True implies sorting based on change percentages.\n  format = '{0,number,currency}', // Optional. Use this format as default fallback.\n  timezone = 'GMT+2') // ........... Optional. Use this timezone as default fallback.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-color-text)">d2d </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">data2d</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  kvs </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> _kvs_</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .................. Required. An array of kv objects.</span></span>\n<span><span style="color: var(--shiki-color-text)">  sort </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .................. Optional. Sort the data2d object.</span></span>\n<span><span style="color: var(--shiki-color-text)">  asc </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .................. Optional. False implies descending order.</span></span>\n<span><span style="color: var(--shiki-color-text)">  change </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ................ Optional. True implies sorting based on change percentages.</span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;{0,number,currency}&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// Optional. Use this format as default fallback.</span></span>\n<span><span style="color: var(--shiki-color-text)">  timezone </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;GMT+2&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........... Optional. Use this timezone as default fallback.</span></span>\n<span></span>'}),title:"Creating data2d object"}),"\n",(0,o.jsx)(n.h2,{id:"extended-array-functions",children:"Extended Array Functions"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object extends some of the built-in ",(0,o.jsx)(n.em,{children:"array"})," functions, providing convenient and familiar ",(0,o.jsx)(n.em,{children:"array"})," manipulations directly within the\n",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object. Here are the extended methods:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#includes",children:(0,o.jsx)(n.code,{children:"includes()"})}),": Use this method to search for a specific value within the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object. This method returns a\n",(0,o.jsx)(n.em,{children:"boolean"})," value indicating whether the searching value is present in any of the\nkey-value pairs."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#set",children:(0,o.jsx)(n.code,{children:"set()"})}),": This method allows you to modify an existing value in the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object. When using this method, the data type of the new value\nmust match the data type of the original value associated with the specified key. Re-sorting of data will be triggered if data is sorted."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#push",children:(0,o.jsx)(n.code,{children:"push()"})}),": This method is used to insert a new key and value pair at the end of the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object. Re-sorting of data will be\ntriggered if data is sorted."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#remove",children:(0,o.jsx)(n.code,{children:"remove()"})}),": Use this method to remove a key and its associated value from the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object. You can also use this method to\nsimply remove the alternate value. Re-sorting of data will be triggered if data is sorted."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#sort",children:(0,o.jsx)(n.code,{children:"sort()"})}),": Use this method to sort the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/extended#format",children:(0,o.jsx)(n.code,{children:"format()"})}),": Use this method to set the default format for the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object. You can also use this method with\n",(0,o.jsx)(n.a,{href:"/create-keys-values#kv",children:(0,o.jsx)(n.code,{children:"kv"})})," objects to set custom formats for any key-value pair."]}),"\n"]}),"\n",(0,o.jsx)(t,{children:(0,o.jsxs)(n.p,{children:["All the remaining examples below will utilize the ",(0,o.jsx)(n.em,{children:"d2d"})," variable, which represents a ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object that we previously created in\nthe example above."]})}),"\n",(0,o.jsxs)(a,{title:"Extended functions",children:[(0,o.jsx)(n.pre,{language:"js",code:"d2d.includes(123.45) // ........... Check within main values. Returns bool.\nd2d.includes(123.45, alt = true) // Check within alternate values. Returns bool.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.includes</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">123.45</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........... Check within main values. Returns bool.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.includes</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">123.45</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Check within alternate values. Returns bool.</span></span>\n<span></span>'}),title:"Includes"}),(0,o.jsx)(n.pre,{language:"js",code:"d2d.set(key = 'open', value = 123.45) // ........... Modify main value for key 'open'.\nd2d.set(key = 'open', value = 456.78, alt = true) // Modify alternate value for key 'open'.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">123.45</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........... Modify main value for key &#39;open&#39;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">456.78</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Modify alternate value for key &#39;open&#39;.</span></span>\n<span></span>'}),title:"Set"}),(0,o.jsx)(n.pre,{language:"js",code:"d2d.push(\n  key = 'misc', // ................... Required. A unique key.\n  value = 123.45, // ................. Required. Any accepted data type value.\n  altValue = 678.90, // .............. Optional. Alternate value, must match main value type.\n  format = \"Misc: {0,number,0.00}\") // Optional. Add a custom format.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>\n<span><span style="color: var(--shiki-color-text)">  key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;misc&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ................... Required. A unique key.</span></span>\n<span><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">123.45</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ................. Required. Any accepted data type value.</span></span>\n<span><span style="color: var(--shiki-color-text)">  altValue </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">678.90</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .............. Optional. Alternate value, must match main value type.</span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Misc: {0,number,0.00}&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Optional. Add a custom format.</span></span>\n<span></span>'}),title:"Push"}),(0,o.jsx)(n.pre,{language:"js",code:"d2d.remove(key = 'misc') // .......... Remove the 'misc' key and value pair.\nd2d.remove(key = 'low', alt = true) // Remove just the alternate value of key 'low'.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.remove</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;misc&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .......... Remove the &#39;misc&#39; key and value pair.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.remove</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;low&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Remove just the alternate value of key &#39;low&#39;.</span></span>\n<span></span>'}),title:"Remove"}),(0,o.jsx)(n.pre,{language:"js",code:"d2d.sort() // ........................... Sorts in ascending order, using main values.\nd2d.sort(change = true) // .... Sorts in ascending order, using change percent values.\nd2d.sort(asc = false, change = false) // Sorts in descending order, using main values.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.sort</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// ........................... Sorts in ascending order, using main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.sort</span><span style="color: var(--shiki-color-text)">(change </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .... Sorts in ascending order, using change percent values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.sort</span><span style="color: var(--shiki-color-text)">(asc </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> change </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Sorts in descending order, using main values.</span></span>\n<span></span>'}),title:"Sort"}),(0,o.jsx)(n.pre,{language:"js",code:"kv.format(format = 'kv: {0}', timezone = 'GMT+2') // Set a custom format for a kv object.\nd2d.format('{0,number,#.#}') // ................. Set default format for a data2d object.\nd2d.format('yyyy-MM-dd') // ......... Set a time format. Applies to all timestamp values.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">kv</span><span style="color: var(--shiki-token-function)">.format</span><span style="color: var(--shiki-color-text)">(format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;kv: {0}&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> timezone </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;GMT+2&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Set a custom format for a kv object.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.format</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;{0,number,#.#}&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ................. Set default format for a data2d object.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.format</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;yyyy-MM-dd&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ......... Set a time format. Applies to all timestamp values.</span></span>\n<span></span>'}),title:"Format"})]}),"\n",(0,o.jsx)(n.h2,{id:"fetch-keys",children:"Fetch Keys"}),"\n",(0,o.jsxs)(n.p,{children:["To obtain all the keys stored within the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object, you can use the ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"keys()"})})," method. This method returns a",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.em,{children:"string-array"})," containing all the keys, and it preserves the sort\norder if the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object is sorted."]}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"d2d.keys() // returns a string array of all keys. Maintains sort order when sort is true.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a string array of all keys. Maintains sort order when sort is true.</span></span>\n<span></span>'}),title:"Get Keys"}),"\n",(0,o.jsx)(n.h2,{id:"fetch-all-values",children:"Fetch all values"}),"\n",(0,o.jsxs)(n.p,{children:["To retrieve the values from a ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object, there are multiple methods available depending on your specific needs.\nIf you only intend to display the data, you can use the ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"values()"})})," method, which converts all values into\n",(0,o.jsx)(n.em,{children:"strings"}),", formats them if applicable, and returns them as a ",(0,o.jsx)(n.em,{children:"string-array"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["However, if you require the original data type of the values, you should use the corresponding data type methods\navailable for ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})}),". The available data type methods are as follows:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"stringValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"string-array"})," of all main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"floatValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"float-array"})," of all main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"intValues()"})}),": Returns an ",(0,o.jsx)(n.em,{children:"integer-array"})," of all main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"boolValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"boolean-array"})," of all main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"colorValues()"})}),": Returns a ",(0,o.jsx)(n.em,{children:"color-array"})," of all main values."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"timestampValues()"})}),": Returns an ",(0,o.jsx)(n.em,{children:"integer-array"})," of all main ",(0,o.jsx)(n.em,{children:"timestamp"})," values."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Please note that if the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object stores multiple types of data, calling any of these data type methods will only\nreturn values that match the specified data type, and ",(0,o.jsx)(n.em,{children:"na"})," for the remaining types. All methods maintain the sort order\nif the object is sorted."]}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"// ............................... For display purpose:\nd2d.values() // .................. Returns string-array of main values.\nd2d.values(alt = true) // ........ Returns string-array of alternate values.\n\n// ............................... String:\nd2d.stringValues() // ............ Returns string-array of main values.\nd2d.stringValues(alt = true) // .. Returns string-array of alternate values.\n\n// ............................... Float:\nd2d.floatValues() // ............. Returns float-array of main values.\nd2d.floatValues(alt = true) // ... Returns float-array of alternate values.\n\n\n// ............................... Integer:\nd2d.intValues() // ............... Returns int-array of main values.\nd2d.intValues(alt = true) // ..... Returns int-array of alternate values.\n\n// ............................... Boolean:\nd2d.boolValues() // .............. Returns bool-array of main values.\nd2d.boolValues(alt = true) // .... Returns bool-array of alternate values.\n\n// ............................... Color:\nd2d.colorValues() //  ............ Returns color-array of main values.\nd2d.colorValues(alt = true) // ... Returns color-array of alternate values.\n\n// ............................... Timestamp:\nd2d.timestampValues() // ......... Returns int-array of main timestamp values.\nd2d.timestampValues(alt = true) // Returns int-array of alternate timestamp values.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ............................... For display purpose:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.values</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// .................. Returns string-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.values</span><span style="color: var(--shiki-color-text)">(alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........ Returns string-array of alternate values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ............................... String:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.stringValues</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// ............ Returns string-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.stringValues</span><span style="color: var(--shiki-color-text)">(alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .. Returns string-array of alternate values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ............................... Float:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.floatValues</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// ............. Returns float-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.floatValues</span><span style="color: var(--shiki-color-text)">(alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ... Returns float-array of alternate values.</span></span>\n<span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ............................... Integer:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.intValues</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// ............... Returns int-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.intValues</span><span style="color: var(--shiki-color-text)">(alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ..... Returns int-array of alternate values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ............................... Boolean:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.boolValues</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// .............. Returns bool-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.boolValues</span><span style="color: var(--shiki-color-text)">(alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .... Returns bool-array of alternate values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ............................... Color:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.colorValues</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">//  ............ Returns color-array of main values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.colorValues</span><span style="color: var(--shiki-color-text)">(alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ... Returns color-array of alternate values.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ............................... Timestamp:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.timestampValues</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// ......... Returns int-array of main timestamp values.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.timestampValues</span><span style="color: var(--shiki-color-text)">(alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Returns int-array of alternate timestamp values.</span></span>\n<span></span>'}),title:"Get values"}),"\n",(0,o.jsx)(n.h2,{id:"fetch-single-value",children:"Fetch Single Value"}),"\n",(0,o.jsxs)(n.p,{children:["To retrieve the value for a specific key from a ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object, there are multiple methods available depending on\nyour specific needs. If you only intend to display the value, you can use the ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"get()"})})," method, which converts the\ndata into a string, formats it if applicable and returns it."]}),"\n",(0,o.jsxs)(n.p,{children:["However, if you require the original data type of the value, you should use the corresponding data type methods\navailable for ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})}),". The available data type methods are as follows:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"get()"})}),": Returns the value for the specified key as a ",(0,o.jsx)(n.em,{children:"string"}),", formatted if applicable."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getString()"})}),": Returns the value for the specified key as a ",(0,o.jsx)(n.em,{children:"string"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getFloat()"})}),": Returns the value for the specified key as a ",(0,o.jsx)(n.em,{children:"float"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getInt()"})}),": Returns the value for the specified key as an ",(0,o.jsx)(n.em,{children:"integer"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getBool()"})}),": Returns the value for the specified key as a ",(0,o.jsx)(n.em,{children:"boolean"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getColor()"})}),": Returns the value for the specified key as a ",(0,o.jsx)(n.em,{children:"color"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"getTimestamp()"})}),": Returns the value for the specified key as a ",(0,o.jsx)(n.em,{children:"timestamp"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Please note that if the key you are requesting does not match the data type of the corresponding method, the method\nwill return ",(0,o.jsx)(n.em,{children:"na"}),", indicating that the requested data type is not available for the specified key."]}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"// .......................................... For display purpose:\nd2d.get(key = 'open') // .................... Returns main string value for key 'open'.\nd2d.get(key = 'open', alt = true) // ........ Returns alternate string value for key 'open'.\n\n// .......................................... String:\nd2d.getString(key = 'open') // .............. Returns main string value for key 'open'.\nd2d.getString(key = 'open', alt = true) // .. Returns alternate string value for key 'open'.\n\n// .......................................... Float:\nd2d.getFloat(key = 'open') // ............... Returns main float value for key 'open'.\nd2d.getFloat(key = 'open', alt = true) // ... Returns alternate float value for key 'open'.\n\n// .......................................... Integer:\nd2d.getInt(key = 'open') // ................. Returns main integer value for key 'open'.\nd2d.getInt(key = 'open', alt = true) // ..... Returns alternate integer value for key 'open'.\n\n// .......................................... Boolean:\nd2d.getBool(key = 'open') // ................ Returns main boolean value for key 'open'.\nd2d.getBool(key = 'open', alt = true) // .... Returns alternate boolean value for key 'open'.\n\n// .......................................... Color:\nd2d.getColor(key = 'open') // ............... Returns main color value for key 'open'.\nd2d.getColor(key = 'open', alt = true) // ... Returns alternate color value for key 'open'.\n\n// .......................................... Timestamp:\nd2d.getTimestamp(key = 'open') // ........... Returns main timestamp value for key 'open'.\nd2d.getTimestamp(key = 'open', alt = true) // Returns alternate timestamp value for key 'open'.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// .......................................... For display purpose:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .................... Returns main string value for key &#39;open&#39;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........ Returns alternate string value for key &#39;open&#39;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// .......................................... String:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getString</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .............. Returns main string value for key &#39;open&#39;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getString</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .. Returns alternate string value for key &#39;open&#39;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// .......................................... Float:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getFloat</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ............... Returns main float value for key &#39;open&#39;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getFloat</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ... Returns alternate float value for key &#39;open&#39;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// .......................................... Integer:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getInt</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ................. Returns main integer value for key &#39;open&#39;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getInt</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ..... Returns alternate integer value for key &#39;open&#39;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// .......................................... Boolean:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getBool</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ................ Returns main boolean value for key &#39;open&#39;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getBool</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .... Returns alternate boolean value for key &#39;open&#39;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// .......................................... Color:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getColor</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ............... Returns main color value for key &#39;open&#39;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getColor</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ... Returns alternate color value for key &#39;open&#39;.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// .......................................... Timestamp:</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getTimestamp</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ........... Returns main timestamp value for key &#39;open&#39;.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.getTimestamp</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> alt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Returns alternate timestamp value for key &#39;open&#39;.</span></span>\n<span></span>'}),title:"Get value"}),"\n",(0,o.jsx)(n.h2,{id:"comparison",children:"Comparison"}),"\n",(0,o.jsxs)(n.p,{children:["The power of alternate values becomes evident with the inclusion of built-in comparison methods in the ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object.\nThese methods enable effortless comparisons of each main value with its corresponding alternate value. All comparison methods maintain\nsorting order if applicable. By default, the methods return comparison for all keys. However, you can easily compare a single key data\nby specifying the key parameter. The following comparison methods are available:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"et()"})}),": This method checks for ",(0,o.jsx)(n.em,{children:"equality"}),", and the comparison operator used is ",(0,o.jsx)(n.em,{children:"main == alt"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"gt()"})}),": This method checks for ",(0,o.jsx)(n.em,{children:"greater than"}),", and the comparison operator used is ",(0,o.jsx)(n.em,{children:"main > alt"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"gte()"})}),": This method checks for ",(0,o.jsx)(n.em,{children:"greater than or equal to"}),", and the comparison operator used is ",(0,o.jsx)(n.em,{children:"main ≥ alt"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"lt()"})}),": This method checks for ",(0,o.jsx)(n.em,{children:"less than"}),", and the comparison operator used is ",(0,o.jsx)(n.em,{children:"main < alt"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"lte()"})}),": This method checks for ",(0,o.jsx)(n.em,{children:"less than or equal to"}),", and the comparison operator used is ",(0,o.jsx)(n.em,{children:"main ≤ alt"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"change()"})}),": This method returns the difference between the main and the alternate value(s) by subtracting the alternate value\nfrom the main value. Additionally, you can request to return the percentage change by using the ",(0,o.jsx)(n.em,{children:"percent = true"})," parameter."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"changeF()"})}),": This method is identical to ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"change()"})})," but returns the formatted value. You can provide a custom format as well."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"timestampChange()"})}),": Similar to the ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"changeF()"})})," method, ",(0,o.jsx)(n.a,{href:"#",children:(0,o.jsx)(n.code,{children:"timestampChange()"})})," targets only timestamp values. It enables\nyou to compare the main vs. alternate timestamp values and return their time difference in segmented times, such as years, months, days,\nhours, minutes, and seconds as a formatted string."]}),"\n"]}),"\n",(0,o.jsxs)(a,{title:"Main vs alternate",children:[(0,o.jsx)(n.pre,{language:"js",code:"// ..................... Check 'equality': main == alt. (preserves sort order)\nd2d.et() // ............ Runs comparison for all keys. Returns a boolean array.\nd2d.et(key = 'open') //  Runs comparison for a single key. Returns a boolean value.\n\n// ..................... Check 'greater than': main > alt. (preserves sort order)\nd2d.gt() // ............ Runs comparison for all keys. Returns a boolean array.\nd2d.gt(key = 'open') //  Runs comparison for a single key. Returns a boolean value.\n\n// ..................... Check 'greater than or equal to': main ≥ alt. (preserves sort order)\nd2d.gte() // ........... Runs comparison for all keys. Returns a boolean array.\nd2d.gte(key = 'open') // Runs comparison for a single key. Returns a boolean value.\n\n// ..................... Check 'less than': main < alt. (preserves sort order.)\nd2d.lt() // ............ Runs comparison for all keys. Returns a boolean array.\nd2d.lt(key = 'open') //  Runs comparison for a single key. Returns a boolean value.\n\n// ..................... Check 'less than or equal to': main ≤ alt. (preserves sort order)\nd2d.lte() // ........... Runs comparison for all keys. Returns a boolean array.\nd2d.lte(key = 'open') // Runs comparison for a single key. Returns a boolean value.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ..................... Check &#39;equality&#39;: main == alt. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.et</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// ............ Runs comparison for all keys. Returns a boolean array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.et</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">//  Runs comparison for a single key. Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ..................... Check &#39;greater than&#39;: main &gt; alt. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.gt</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// ............ Runs comparison for all keys. Returns a boolean array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.gt</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">//  Runs comparison for a single key. Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ..................... Check &#39;greater than or equal to&#39;: main ≥ alt. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.gte</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// ........... Runs comparison for all keys. Returns a boolean array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.gte</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Runs comparison for a single key. Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ..................... Check &#39;less than&#39;: main &lt; alt. (preserves sort order.)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.lt</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// ............ Runs comparison for all keys. Returns a boolean array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.lt</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">//  Runs comparison for a single key. Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ..................... Check &#39;less than or equal to&#39;: main ≤ alt. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.lte</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// ........... Runs comparison for all keys. Returns a boolean array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.lte</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Runs comparison for a single key. Returns a boolean value.</span></span>\n<span></span>'}),title:"Compare"}),(0,o.jsx)(n.pre,{language:"js",code:"// ........................... Get the difference: main - alt. (preserves sort order)\nd2d.change() // .............. Calculates for all keys. Returns a boolean array.\nd2d.change(key = 'open') // .. Calculates for a single key. Returns a boolean value.\n\n// Get the percentage difference: (main - alt) / alt * 100. (preserves sort order)\nd2d.change(percent = true) //  Calculates for all keys. Returns a boolean array.\nd2d.change( // ............... Calculates for a single key. Returns a boolean value.\n  key = 'open',\n  percent = true)\n\n// ........................... Get the formatted difference: main - alt. (preserves sort order)\nd2d.changeF( // .............. Calculates for all keys. Returns a boolean array.\n  format = \"{0,number,#}\") //  Provide a custom format. Otherwise, a default format will be used.\nd2d.changeF(key = 'open') // . Calculates for a single key. Returns a boolean value.\n\n// Get the formatted percentage difference: (main - alt) / alt * 100. (preserves sort order)\nd2d.changeF(percent = true) // Calculates for all keys. Returns a boolean array.\nd2d.changeF( // .............. Calculates for a single key. Returns a boolean value.\n  key = 'open',\n  percent = true,\n  format = \"Pct: {0}%\") // ... Provide a custom format. Otherwise, a default format will be used.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ........................... Get the difference: main - alt. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.change</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// .............. Calculates for all keys. Returns a boolean array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.change</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// .. Calculates for a single key. Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Get the percentage difference: (main - alt) / alt * 100. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.change</span><span style="color: var(--shiki-color-text)">(percent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">//  Calculates for all keys. Returns a boolean array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.change</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// ............... Calculates for a single key. Returns a boolean value.</span></span>\n<span><span style="color: var(--shiki-color-text)">  key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  percent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ........................... Get the formatted difference: main - alt. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.changeF</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// .............. Calculates for all keys. Returns a boolean array.</span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;{0,number,#}&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">//  Provide a custom format. Otherwise, a default format will be used.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.changeF</span><span style="color: var(--shiki-color-text)">(key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// . Calculates for a single key. Returns a boolean value.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// Get the formatted percentage difference: (main - alt) / alt * 100. (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.changeF</span><span style="color: var(--shiki-color-text)">(percent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// Calculates for all keys. Returns a boolean array.</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.changeF</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// .............. Calculates for a single key. Returns a boolean value.</span></span>\n<span><span style="color: var(--shiki-color-text)">  key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  percent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>\n<span><span style="color: var(--shiki-color-text)">  format </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Pct: {0}%&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ... Provide a custom format. Otherwise, a default format will be used.</span></span>\n<span></span>'}),title:"Change"}),(0,o.jsx)(n.pre,{language:"js",code:"// ......................... Get timestamp changes for all keys: (preserves sort order)\nd2d.timestampChange( // .... Returns an array of strings with time segments.\n  years = true, // ......... Switch to turn on/off the years segment. Default is false.\n  months = false, // ....... Switch to turn on/off the months segment. Default is false.\n  weeks = false, // ........ Switch to turn on/off the weeks segment. Default is false.\n  days = true, // .......... Switch to turn on/off the days segment. Default is true.\n  hours = true, // ......... Switch to turn on/off the hours segment. Default is true.\n  minutes = true, // ....... Switch to turn on/off the minutes segment. Default is true.\n  seconds = true) // ....... Switch to turn on/off the seconds segment. Default is true.\n\n// ......................... Get timestamp change for a single key: \nd2d.timestampChange( // .... Returns a string with time segments for single key.\n  key = 'open', // ......... Single key to calculate.\n  years = true, // ......... Switch to turn on/off the years segment. Default is false.\n  months = false, // ....... Switch to turn on/off the months segment. Default is false.\n  weeks = false, // ........ Switch to turn on/off the weeks segment. Default is false.\n  days = true, // .......... Switch to turn on/off the days segment. Default is true.\n  hours = true, // ......... Switch to turn on/off the hours segment. Default is true.\n  minutes = true, // ....... Switch to turn on/off the minutes segment. Default is true.\n  seconds = true) // ....... Switch to turn on/off the seconds segment. Default is true.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// ......................... Get timestamp changes for all keys: (preserves sort order)</span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.timestampChange</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// .... Returns an array of strings with time segments.</span></span>\n<span><span style="color: var(--shiki-color-text)">  years </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Switch to turn on/off the years segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  months </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the months segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  weeks </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ........ Switch to turn on/off the weeks segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  days </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .......... Switch to turn on/off the days segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  hours </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Switch to turn on/off the hours segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  minutes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the minutes segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  seconds </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the seconds segment. Default is true.</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-comment)">// ......................... Get timestamp change for a single key: </span></span>\n<span><span style="color: var(--shiki-token-constant)">d2d</span><span style="color: var(--shiki-token-function)">.timestampChange</span><span style="color: var(--shiki-color-text)">( </span><span style="color: var(--shiki-token-comment)">// .... Returns a string with time segments for single key.</span></span>\n<span><span style="color: var(--shiki-color-text)">  key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;open&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Single key to calculate.</span></span>\n<span><span style="color: var(--shiki-color-text)">  years </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Switch to turn on/off the years segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  months </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the months segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  weeks </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ........ Switch to turn on/off the weeks segment. Default is false.</span></span>\n<span><span style="color: var(--shiki-color-text)">  days </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// .......... Switch to turn on/off the days segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  hours </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ......... Switch to turn on/off the hours segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  minutes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the minutes segment. Default is true.</span></span>\n<span><span style="color: var(--shiki-color-text)">  seconds </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// ....... Switch to turn on/off the seconds segment. Default is true.</span></span>\n<span></span>'}),title:"Timestamp"})]}),"\n",(0,o.jsx)(n.h2,{id:"print",children:"Print"}),"\n",(0,o.jsxs)(n.p,{children:["You can now easily print any ",(0,o.jsx)(n.a,{href:"/_data2d",children:(0,o.jsx)(n.code,{children:"data2d"})})," object, directly on your chart, using the ",(0,o.jsx)(n.code,{children:"print()"})," method from the\n",(0,o.jsx)(n.a,{href:"https://faiyaz7283.github.io/tools",children:(0,o.jsx)(n.code,{children:"tools"})})," library."]}),"\n",(0,o.jsx)(n.pre,{language:"js",code:"// Replace the N with latest version number.\n// import faiyaz7283/tools/N as tools\n\nif barstate.islast\n  printer = tools._printer.new()\n\n  // Pass any data2d object.\n  printer.print(d2d_obj) // Displays the objects keys and values.\n",children:(0,o.jsx)(n.code,{className:"language-js",children:'<span><span style="color: var(--shiki-token-comment)">// Replace the N with latest version number.</span></span>\n<span><span style="color: var(--shiki-token-comment)">// import faiyaz7283/tools/N as tools</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">barstate</span><span style="color: var(--shiki-color-text)">.islast</span></span>\n<span><span style="color: var(--shiki-color-text)">  printer </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">tools</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">_printer</span><span style="color: var(--shiki-token-function)">.new</span><span style="color: var(--shiki-color-text)">()</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Pass any data2d object.</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">printer</span><span style="color: var(--shiki-token-function)">.print</span><span style="color: var(--shiki-color-text)">(d2d_obj) </span><span style="color: var(--shiki-token-comment)">// Displays the objects keys and values.</span></span>\n<span></span>'}),title:"Print"})]})}var r=!0;function l(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,e.ah)(),s.components);return n?(0,o.jsx)(n,Object.assign({},s,{children:(0,o.jsx)(t,s)})):t(s)}}},function(s){s.O(0,[774,888,179],function(){return s(s.s=8909)}),_N_E=s.O()}]);